
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Province;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Province + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Province));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str3.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Village;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Village + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Village));

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Estate;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Estate + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Estate));

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    org.cs362.dominion.Card.CardName cardName0 = org.cs362.dominion.Card.CardName.Curse;
    org.junit.Assert.assertTrue("'" + cardName0 + "' != '" + org.cs362.dominion.Card.CardName.Curse + "'", cardName0.equals(org.cs362.dominion.Card.CardName.Curse));

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState3.getWinners();
    java.util.List<org.cs362.dominion.Card> list_card7 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    java.lang.String str6 = gameState3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.buyCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    java.lang.String str18 = player13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    org.cs362.dominion.Card card36 = null;
    player33.discard(card36);
    player33.playTtreasureCard();
    player33.buyCard();
    player33.printStateGame();
    gameState19.addPlayer(player33);
    // The following exception was thrown during execution in test generation
    try {
    gameState19.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    player17.playKingdomCard();
    player17.buyCard();
    java.lang.String str21 = player17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str21.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    // The following exception was thrown during execution in test generation
    try {
    gameState3.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card3);
    org.cs362.dominion.GameState gameState6 = null;
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState6, "hi!");
    java.lang.String str9 = player8.toString();
    org.cs362.dominion.Player[] player_array10 = new org.cs362.dominion.Player[] { player8 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player11 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player11, player_array10);
    gameState5.players = arraylist_player11;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState5, "hi!");
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    gameState5.cards = arraylist_card18;
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    player35.playTtreasureCard();
    gameState5.addPlayer(player35);
    gameState1.addPlayer(player35);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState1.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    // The following exception was thrown during execution in test generation
    try {
    player17.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.buyCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.printStateGame();
    player13.playKingdomCard();
    player13.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    org.cs362.dominion.Card card36 = null;
    player33.discard(card36);
    player33.playTtreasureCard();
    player33.buyCard();
    player33.printStateGame();
    gameState19.addPlayer(player33);
    player33.buyCard();
    player33.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    gameState19.addPlayer(player33);
    gameState19.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.buyCard();

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playKingdomCard();
    player2.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str3.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card7 = org.cs362.dominion.Card.getCard(list_card5, cardName6);
    org.cs362.dominion.Card.Type type8 = null;
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type8);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Adventurer;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard(list_card9, cardName10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Adventurer + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Adventurer));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState6 = new org.cs362.dominion.GameState(list_card5);
    gameState3.cards = list_card5;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    gameState3.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    java.lang.String str22 = gameState3.toString();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    org.cs362.dominion.GameState gameState27 = null;
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState27, "hi!");
    java.lang.String str30 = player29.toString();
    org.cs362.dominion.Player[] player_array31 = new org.cs362.dominion.Player[] { player29 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player32 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player32, player_array31);
    gameState26.players = arraylist_player32;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState26.play();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState26.play();
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState26, "");
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.GameState gameState44 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card42);
    java.lang.String str45 = gameState44.toString();
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState44.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i47 = gameState44.getWinners();
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.GameState gameState51 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card49);
    org.cs362.dominion.GameState gameState52 = null;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState52, "hi!");
    java.lang.String str55 = player54.toString();
    org.cs362.dominion.Player[] player_array56 = new org.cs362.dominion.Player[] { player54 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player57 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player57, player_array56);
    gameState51.players = arraylist_player57;
    org.cs362.dominion.Player player61 = new org.cs362.dominion.Player(gameState51, "hi!");
    gameState51.initializeGame();
    org.cs362.dominion.GameState gameState63 = null;
    org.cs362.dominion.Player player65 = new org.cs362.dominion.Player(gameState63, "hi!");
    gameState51.addPlayer(player65);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i67 = gameState51.gameBoard;
    gameState44.gameBoard = hashmap_card_i67;
    gameState26.gameBoard = hashmap_card_i67;
    gameState3.gameBoard = hashmap_card_i67;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str22.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str30.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str45.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str55.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i67);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    java.lang.String str22 = gameState3.toString();
    boolean b23 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str22.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    org.cs362.dominion.Card card36 = null;
    player33.discard(card36);
    player33.playTtreasureCard();
    player33.buyCard();
    player33.printStateGame();
    gameState19.addPlayer(player33);
    player33.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState3, "");
    java.lang.String str18 = player17.toString();
    player17.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    player17.playKingdomCard();
    java.lang.String str20 = player17.toString();
    java.lang.String str21 = player17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str21.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playTtreasureCard();
    player2.buyCard();

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card7 = org.cs362.dominion.Card.getCard(list_card5, cardName6);
    org.cs362.dominion.Card.Type type8 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type8);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState10.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playKingdomCard();

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    player32.playKingdomCard();
    gameState3.addPlayer(player32);
    java.lang.String str36 = player32.toString();
    // The following exception was thrown during execution in test generation
    try {
    player32.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str36.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    gameState20.cards = list_card40;
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.lang.String str49 = player48.toString();
    org.cs362.dominion.Player[] player_array50 = new org.cs362.dominion.Player[] { player48 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player51 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player51, player_array50);
    gameState45.players = arraylist_player51;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState45.initializeGame();
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    gameState45.cards = arraylist_card58;
    org.cs362.dominion.GameState gameState61 = gameState45.clone();
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card63);
    org.cs362.dominion.GameState gameState66 = null;
    org.cs362.dominion.Player player68 = new org.cs362.dominion.Player(gameState66, "hi!");
    java.lang.String str69 = player68.toString();
    org.cs362.dominion.Player[] player_array70 = new org.cs362.dominion.Player[] { player68 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player71 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player71, player_array70);
    gameState65.players = arraylist_player71;
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState65, "hi!");
    player75.playTtreasureCard();
    player75.playKingdomCard();
    org.cs362.dominion.Card card78 = null;
    player75.discard(card78);
    player75.playTtreasureCard();
    player75.buyCard();
    player75.printStateGame();
    gameState61.addPlayer(player75);
    player75.buyCard();
    gameState20.addPlayer(player75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str49.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str69.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.lang.String str15 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str15.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card3);
    org.cs362.dominion.GameState gameState6 = null;
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState6, "hi!");
    java.lang.String str9 = player8.toString();
    org.cs362.dominion.Player[] player_array10 = new org.cs362.dominion.Player[] { player8 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player11 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player11, player_array10);
    gameState5.players = arraylist_player11;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState5, "hi!");
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    gameState5.cards = arraylist_card18;
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    player35.playTtreasureCard();
    gameState5.addPlayer(player35);
    gameState1.addPlayer(player35);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState1.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    gameState24.cards = arraylist_card37;
    org.cs362.dominion.GameState gameState40 = gameState24.clone();
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState24, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    org.cs362.dominion.GameState gameState47 = null;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState47, "hi!");
    java.lang.String str50 = player49.toString();
    org.cs362.dominion.Player[] player_array51 = new org.cs362.dominion.Player[] { player49 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player52 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player52, player_array51);
    gameState46.players = arraylist_player52;
    org.cs362.dominion.Player player56 = new org.cs362.dominion.Player(gameState46, "hi!");
    player56.playTtreasureCard();
    player56.playTtreasureCard();
    org.cs362.dominion.Card card59 = null;
    player56.discard(card59);
    java.lang.String str61 = player56.toString();
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card63);
    org.cs362.dominion.GameState gameState66 = null;
    org.cs362.dominion.Player player68 = new org.cs362.dominion.Player(gameState66, "hi!");
    java.lang.String str69 = player68.toString();
    org.cs362.dominion.Player[] player_array70 = new org.cs362.dominion.Player[] { player68 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player71 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player71, player_array70);
    gameState65.players = arraylist_player71;
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState65, "hi!");
    player75.playTtreasureCard();
    player75.playKingdomCard();
    org.cs362.dominion.Card card78 = null;
    player75.discard(card78);
    player75.playTtreasureCard();
    player75.buyCard();
    org.cs362.dominion.Player[] player_array82 = new org.cs362.dominion.Player[] { player56, player75 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player83 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player83, player_array82);
    gameState24.players = arraylist_player83;
    gameState19.players = arraylist_player83;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str50.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str61.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str69.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.Card[] card_array1 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card2, card_array1);
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card2);
    java.lang.String str5 = gameState4.toString();
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    org.cs362.dominion.Card.CardName cardName7 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card8 = org.cs362.dominion.Card.getCard(list_card6, cardName7);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Smithy;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard(list_card6, cardName10);
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card12 = org.cs362.dominion.Card.getCard(list_card0, cardName10);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Smithy + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card11);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    org.cs362.dominion.Card card17 = null;
    player16.discard(card17);
    player16.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    java.lang.String str23 = gameState22.toString();
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState22.cards;
    org.cs362.dominion.Card.CardName cardName25 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card26 = org.cs362.dominion.Card.getCard(list_card24, cardName25);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card24, type27);
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card16, type27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str23.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + cardName25 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName25.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    player14.playKingdomCard();
    java.lang.String str16 = player14.toString();
    java.lang.String str17 = player14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str16.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    boolean b6 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.lang.String str10 = gameState9.toString();
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard(list_card11, cardName12);
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type14);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.Card.Type type21 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type21);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    java.lang.String str27 = gameState26.toString();
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState26.cards;
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard(list_card28, cardName29);
    org.cs362.dominion.Card.Type type31 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card28, type31);
    java.util.List<org.cs362.dominion.Card> list_card33 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type31);
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Cooper;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName34);
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card1, cardName34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type21.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str27.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type31.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.buyCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.printStateGame();
    player13.playKingdomCard();
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState8, "hi!");
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState8.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    gameState3.addPlayer(player33);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState8.cards;
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState3.players;
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i40 = gameState24.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i41 = gameState24.getWinners();
    org.cs362.dominion.GameState gameState42 = gameState24.clone();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    java.lang.String str47 = gameState46.toString();
    java.lang.String str48 = gameState46.toString();
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState46, "hi!");
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    org.cs362.dominion.GameState gameState54 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card52);
    java.lang.String str55 = gameState54.toString();
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState54.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i57 = gameState54.getWinners();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card59);
    org.cs362.dominion.GameState gameState62 = null;
    org.cs362.dominion.Player player64 = new org.cs362.dominion.Player(gameState62, "hi!");
    java.lang.String str65 = player64.toString();
    org.cs362.dominion.Player[] player_array66 = new org.cs362.dominion.Player[] { player64 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player67 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player67, player_array66);
    gameState61.players = arraylist_player67;
    org.cs362.dominion.Player player71 = new org.cs362.dominion.Player(gameState61, "hi!");
    gameState61.initializeGame();
    org.cs362.dominion.GameState gameState73 = null;
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState73, "hi!");
    gameState61.addPlayer(player75);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i77 = gameState61.gameBoard;
    gameState54.gameBoard = hashmap_card_i77;
    gameState46.gameBoard = hashmap_card_i77;
    gameState42.gameBoard = hashmap_card_i77;
    gameState3.gameBoard = hashmap_card_i77;
    // The following exception was thrown during execution in test generation
    try {
    gameState3.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str48.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str55.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str65.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i77);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.GameState gameState7 = gameState3.clone();
    boolean b8 = gameState3.isGameOver();
    boolean b9 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.buyCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.printStateGame();
    player13.playKingdomCard();
    player13.playKingdomCard();
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    java.lang.String str11 = gameState10.toString();
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    org.cs362.dominion.Card.Type type13 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card12, type13);
    gameState3.cards = list_card14;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str11.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type13.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.lang.String str5 = gameState3.toString();
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.lang.String str12 = gameState11.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState11.getWinners();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState18.gameBoard;
    gameState11.gameBoard = hashmap_card_i34;
    gameState3.gameBoard = hashmap_card_i34;
    boolean b37 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    gameState25.initializeGame();
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    gameState25.addPlayer(player39);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState25.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState25.players;
    gameState3.players = list_player42;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i44 = gameState3.gameBoard;
    // The following exception was thrown during execution in test generation
    try {
    gameState3.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i44);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    gameState3.cards = arraylist_card18;
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.Card.Type type25 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card22, type25);
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card28);
    java.lang.String str31 = gameState30.toString();
    java.util.List<org.cs362.dominion.Card> list_card32 = gameState30.cards;
    org.cs362.dominion.Card.CardName cardName33 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card34 = org.cs362.dominion.Card.getCard(list_card32, cardName33);
    org.cs362.dominion.Card.Type type35 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card32, type35);
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card22, type35);
    org.cs362.dominion.Card.CardName cardName38 = org.cs362.dominion.Card.CardName.Duchy;
    org.cs362.dominion.Card card39 = org.cs362.dominion.Card.getCard(list_card37, cardName38);
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card41);
    org.cs362.dominion.Card.Type type44 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card41, type44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card37, type44);
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type25.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str31.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    org.junit.Assert.assertTrue("'" + cardName33 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName33.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card34);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type35.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + cardName38 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName38.equals(org.cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type44.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    java.lang.String str22 = gameState21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str22.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card card15 = null;
    player14.discard(card15);
    java.lang.String str17 = player14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    gameState20.cards = arraylist_card33;
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    player50.playTtreasureCard();
    gameState20.addPlayer(player50);
    gameState3.addPlayer(player50);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.GameState gameState57 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card55);
    org.cs362.dominion.Card.Type type58 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card55, type58);
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    org.cs362.dominion.GameState gameState63 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card61);
    java.lang.String str64 = gameState63.toString();
    java.util.List<org.cs362.dominion.Card> list_card65 = gameState63.cards;
    org.cs362.dominion.Card.CardName cardName66 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card67 = org.cs362.dominion.Card.getCard(list_card65, cardName66);
    org.cs362.dominion.Card.Type type68 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card69 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card65, type68);
    java.util.List<org.cs362.dominion.Card> list_card70 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card55, type68);
    org.cs362.dominion.Card.CardName cardName71 = org.cs362.dominion.Card.CardName.Cooper;
    org.cs362.dominion.Card card72 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card55, cardName71);
    gameState3.cards = arraylist_card55;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type58.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str64.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);
    org.junit.Assert.assertTrue("'" + cardName66 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName66.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card67);
    org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type68.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName71.equals(org.cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playTtreasureCard();
    player13.buyCard();
    player13.playKingdomCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card22 = null;
    player13.discard(card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState3, "");
    player17.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playKingdomCard();
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    org.cs362.dominion.GameState gameState17 = gameState3.clone();
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState3, "");
    player17.buyCard();
    player17.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    java.lang.String str20 = gameState19.toString();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    java.lang.String str25 = gameState24.toString();
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState24.getWinners();
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    org.cs362.dominion.GameState gameState32 = null;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState32, "hi!");
    java.lang.String str35 = player34.toString();
    org.cs362.dominion.Player[] player_array36 = new org.cs362.dominion.Player[] { player34 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player37 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player37, player_array36);
    gameState31.players = arraylist_player37;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState31.initializeGame();
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    gameState31.addPlayer(player45);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState31.gameBoard;
    gameState24.gameBoard = hashmap_card_i47;
    gameState19.gameBoard = hashmap_card_i47;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i50 = gameState19.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i50);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState3.play();
    boolean b15 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i7 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    player21.playTtreasureCard();
    player21.playKingdomCard();
    org.cs362.dominion.Card card24 = null;
    player21.discard(card24);
    player21.playTtreasureCard();
    player21.buyCard();
    player21.printStateGame();
    gameState3.addPlayer(player21);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.lang.String str35 = gameState33.toString();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState3.addPlayer(player37);
    java.util.List<org.cs362.dominion.Card> list_card39 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    gameState3.cards = arraylist_card18;
    org.cs362.dominion.Card.CardName cardName21 = null;
    org.cs362.dominion.Card card22 = org.cs362.dominion.Card.getCard((java.util.List<org.cs362.dominion.Card>)arraylist_card18, cardName21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card22);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.lang.String str12 = gameState11.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard(list_card13, cardName14);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState(list_card13);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Smithy;
    org.cs362.dominion.Card card18 = org.cs362.dominion.Card.getCard(list_card13, cardName17);
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard(list_card7, cardName17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card15);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Smithy + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card19);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.lang.String str15 = gameState3.toString();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    java.lang.String str20 = gameState19.toString();
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState19.cards;
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard(list_card21, cardName22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card21, type24);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    gameState3.cards = list_card25;
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str15.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type24.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.GameState gameState7 = gameState3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState7);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    gameState3.addPlayer(player33);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState3.players;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState23.play();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState23.cards;
    java.util.List<org.cs362.dominion.Player> list_player36 = gameState23.players;
    gameState3.players = list_player36;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player36);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card10);
    java.lang.String str13 = gameState12.toString();
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState12.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState12.getWinners();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    org.cs362.dominion.GameState gameState20 = null;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState20, "hi!");
    java.lang.String str23 = player22.toString();
    org.cs362.dominion.Player[] player_array24 = new org.cs362.dominion.Player[] { player22 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player25 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player25, player_array24);
    gameState19.players = arraylist_player25;
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState19, "hi!");
    gameState19.initializeGame();
    org.cs362.dominion.GameState gameState31 = null;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState19.addPlayer(player33);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState19.gameBoard;
    gameState12.gameBoard = hashmap_card_i35;
    gameState8.gameBoard = hashmap_card_i35;
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i50 = gameState41.play();
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState41.play();
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState41, "");
    org.cs362.dominion.Card[] card_array56 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card57 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card57, card_array56);
    org.cs362.dominion.GameState gameState59 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card57);
    java.lang.String str60 = gameState59.toString();
    java.util.List<org.cs362.dominion.Card> list_card61 = gameState59.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState59.getWinners();
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    org.cs362.dominion.GameState gameState66 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card64);
    org.cs362.dominion.GameState gameState67 = null;
    org.cs362.dominion.Player player69 = new org.cs362.dominion.Player(gameState67, "hi!");
    java.lang.String str70 = player69.toString();
    org.cs362.dominion.Player[] player_array71 = new org.cs362.dominion.Player[] { player69 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player72 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player72, player_array71);
    gameState66.players = arraylist_player72;
    org.cs362.dominion.Player player76 = new org.cs362.dominion.Player(gameState66, "hi!");
    gameState66.initializeGame();
    org.cs362.dominion.GameState gameState78 = null;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState78, "hi!");
    gameState66.addPlayer(player80);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i82 = gameState66.gameBoard;
    gameState59.gameBoard = hashmap_card_i82;
    gameState41.gameBoard = hashmap_card_i82;
    gameState8.gameBoard = hashmap_card_i82;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str13.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str23.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str60.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str70.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i82);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    player2.playTtreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player2.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    org.cs362.dominion.GameState gameState20 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    player20.playTtreasureCard();
    player20.playTtreasureCard();
    gameState3.addPlayer(player20);
    player20.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    gameState25.initializeGame();
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    gameState25.cards = arraylist_card38;
    org.cs362.dominion.GameState gameState41 = gameState25.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i42 = gameState25.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i43 = gameState25.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i44 = null;
    gameState25.gameBoard = hashmap_card_i44;
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState25.cards;
    gameState21.cards = list_card46;
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.GameState gameState51 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card49);
    java.lang.String str52 = gameState51.toString();
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState51.cards;
    org.cs362.dominion.Card.Type type54 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card55 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card53, type54);
    gameState21.cards = list_card53;
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    org.cs362.dominion.GameState gameState60 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card58);
    java.lang.String str61 = gameState60.toString();
    java.util.List<org.cs362.dominion.Card> list_card62 = gameState60.cards;
    org.cs362.dominion.Card.Type type63 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card64 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card62, type63);
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState(list_card62);
    org.cs362.dominion.Player player67 = new org.cs362.dominion.Player(gameState65, "hi!");
    player67.buyCard();
    gameState21.addPlayer(player67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str52.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type54.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type63.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array1 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card2, card_array1);
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card2);
    java.lang.String str5 = gameState4.toString();
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card0, type7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.GameState gameState11 = gameState10.clone();
    gameState10.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    org.cs362.dominion.GameState gameState8 = gameState3.clone();
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card10);
    java.lang.String str13 = gameState12.toString();
    java.lang.String str14 = gameState12.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState12, "hi!");
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    java.lang.String str21 = gameState20.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState20.getWinners();
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.GameState gameState28 = null;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState28, "hi!");
    java.lang.String str31 = player30.toString();
    org.cs362.dominion.Player[] player_array32 = new org.cs362.dominion.Player[] { player30 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player33 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player33, player_array32);
    gameState27.players = arraylist_player33;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState27, "hi!");
    gameState27.initializeGame();
    org.cs362.dominion.GameState gameState39 = null;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState39, "hi!");
    gameState27.addPlayer(player41);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i43 = gameState27.gameBoard;
    gameState20.gameBoard = hashmap_card_i43;
    gameState12.gameBoard = hashmap_card_i43;
    org.cs362.dominion.Card[] card_array46 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card47 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card47, card_array46);
    org.cs362.dominion.GameState gameState49 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card47);
    org.cs362.dominion.GameState gameState50 = null;
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState50, "hi!");
    java.lang.String str53 = player52.toString();
    org.cs362.dominion.Player[] player_array54 = new org.cs362.dominion.Player[] { player52 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player55 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player55, player_array54);
    gameState49.players = arraylist_player55;
    org.cs362.dominion.Player player59 = new org.cs362.dominion.Player(gameState49, "hi!");
    gameState49.initializeGame();
    org.cs362.dominion.GameState gameState61 = null;
    org.cs362.dominion.Player player63 = new org.cs362.dominion.Player(gameState61, "hi!");
    gameState49.addPlayer(player63);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i65 = gameState49.gameBoard;
    gameState12.gameBoard = hashmap_card_i65;
    gameState3.gameBoard = hashmap_card_i65;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str13.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str31.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str53.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i65);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState8, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState8.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    player32.playKingdomCard();
    gameState3.addPlayer(player32);
    player32.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState3.play();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    gameState10.cards = arraylist_card23;
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState10.cards;
    gameState3.cards = list_card26;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    gameState25.initializeGame();
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    gameState25.addPlayer(player39);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState25.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState25.players;
    gameState3.players = list_player42;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i44 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Card> list_card45 = null;
    gameState3.cards = list_card45;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.GameState gameState47 = gameState3.clone();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i44);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState3, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState8.getWinners();
    java.lang.String str10 = gameState8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i4 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i4);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState10.addPlayer(player24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState10.cards;
    java.lang.String str28 = gameState10.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type33);
    gameState10.cards = list_card34;
    gameState6.cards = list_card34;
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    player50.playTtreasureCard();
    player50.playKingdomCard();
    org.cs362.dominion.Card card53 = null;
    player50.discard(card53);
    player50.playTtreasureCard();
    player50.playTtreasureCard();
    gameState6.addPlayer(player50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type33.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    gameState20.cards = list_card40;
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    java.lang.String str46 = gameState45.toString();
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState45.cards;
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard(list_card47, cardName48);
    org.cs362.dominion.Card.Type type50 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card47, type50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card40, type50);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card54);
    java.lang.String str57 = gameState56.toString();
    java.util.List<org.cs362.dominion.Card> list_card58 = gameState56.cards;
    org.cs362.dominion.Card.Type type59 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card58, type59);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card52, type59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState(list_card52);
    boolean b63 = gameState62.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str46.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type50.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str57.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type59.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    boolean b20 = gameState19.isGameOver();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState3, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player21.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    player14.playKingdomCard();
    player14.buyCard();
    org.cs362.dominion.Card card17 = null;
    player14.discard(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    java.lang.String str18 = player17.toString();
    org.cs362.dominion.Player[] player_array19 = new org.cs362.dominion.Player[] { player17 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player20 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player20, player_array19);
    gameState14.players = arraylist_player20;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState14.play();
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState14, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState14.play();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState14, "");
    gameState8.addPlayer(player28);
    player28.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.lang.String str5 = gameState3.toString();
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.lang.String str12 = gameState11.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState11.getWinners();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState18.gameBoard;
    gameState11.gameBoard = hashmap_card_i34;
    gameState3.gameBoard = hashmap_card_i34;
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState40.initializeGame();
    org.cs362.dominion.GameState gameState52 = null;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState52, "hi!");
    gameState40.addPlayer(player54);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState40.gameBoard;
    gameState3.gameBoard = hashmap_card_i56;
    java.util.List<org.cs362.dominion.Card> list_card58 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState23.play();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState23.play();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState23, "");
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str52 = gameState41.toString();
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState41, "The board game is embty you need to intialize the game!!!!");
    gameState23.addPlayer(player54);
    gameState19.addPlayer(player54);
    org.cs362.dominion.Card card57 = null;
    player54.discard(card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str52.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    gameState20.cards = arraylist_card33;
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    player50.playTtreasureCard();
    gameState20.addPlayer(player50);
    gameState3.addPlayer(player50);
    player50.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    gameState19.addPlayer(player33);
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState19.cards;
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    gameState41.initializeGame();
    org.cs362.dominion.GameState gameState53 = null;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState53, "hi!");
    gameState41.addPlayer(player55);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i57 = gameState41.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState41.players;
    gameState19.players = list_player58;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i60 = gameState19.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i60);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i9 = gameState3.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i9);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.lang.String str10 = gameState9.toString();
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    java.lang.String str15 = gameState14.toString();
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState14.cards;
    boolean b17 = gameState14.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card20, type23);
    org.cs362.dominion.Card.Type type25 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card20, type25);
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card18, type25);
    gameState14.cards = list_card27;
    gameState9.cards = list_card27;
    gameState3.cards = list_card27;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str15.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type23.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type25.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    gameState23.cards = arraylist_card36;
    gameState3.cards = arraylist_card36;
    org.cs362.dominion.GameState gameState40 = gameState3.clone();
    java.lang.String str41 = gameState3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str41.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.GameState gameState35 = null;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState35, "hi!");
    gameState23.addPlayer(player37);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState23.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i40 = gameState23.getWinners();
    boolean b41 = gameState23.isGameOver();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.lang.String str49 = player48.toString();
    org.cs362.dominion.Player[] player_array50 = new org.cs362.dominion.Player[] { player48 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player51 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player51, player_array50);
    gameState45.players = arraylist_player51;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState45.initializeGame();
    org.cs362.dominion.GameState gameState57 = null;
    org.cs362.dominion.Player player59 = new org.cs362.dominion.Player(gameState57, "hi!");
    gameState45.addPlayer(player59);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i61 = gameState45.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player62 = gameState45.players;
    gameState23.players = list_player62;
    gameState3.players = list_player62;
    java.util.List<org.cs362.dominion.Card> list_card65 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str49.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    gameState3.cards = list_card27;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card27);
    gameState29.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type36);
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card31, type38);
    gameState29.cards = list_card40;
    org.cs362.dominion.GameState gameState42 = gameState29.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type36.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type38.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    gameState3.cards = list_card27;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card27);
    gameState29.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type36);
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card31, type38);
    gameState29.cards = list_card40;
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.lang.String str49 = player48.toString();
    org.cs362.dominion.Player[] player_array50 = new org.cs362.dominion.Player[] { player48 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player51 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player51, player_array50);
    gameState45.players = arraylist_player51;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState45.initializeGame();
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    gameState45.cards = arraylist_card58;
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card58);
    gameState29.cards = arraylist_card58;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type36.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type38.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str49.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card7 = org.cs362.dominion.Card.getCard(list_card5, cardName6);
    org.cs362.dominion.Card.Type type8 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type8);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState10.cards;
    gameState10.initializeGame();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState10, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    gameState20.initializeGame();
    org.cs362.dominion.GameState gameState32 = null;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState32, "hi!");
    gameState20.addPlayer(player34);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i36 = gameState20.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player37 = gameState20.players;
    gameState3.players = list_player37;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState3.play();
    gameState3.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    org.cs362.dominion.Card.CardName cardName4 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    org.junit.Assert.assertTrue("'" + cardName4 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName4.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playTtreasureCard();
    player13.buyCard();
    player13.playKingdomCard();
    player13.playKingdomCard();
    player13.playTtreasureCard();
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player6 = gameState3.players;
    java.util.List<org.cs362.dominion.Player> list_player7 = gameState3.players;
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState3.players;
    org.cs362.dominion.GameState gameState9 = gameState3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState9);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    org.cs362.dominion.GameState gameState17 = gameState3.clone();
    boolean b18 = gameState3.isGameOver();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    gameState11.initializeGame();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    gameState11.cards = arraylist_card24;
    org.cs362.dominion.GameState gameState27 = gameState11.clone();
    org.cs362.dominion.GameState gameState28 = gameState27.clone();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.GameState gameState33 = null;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState33, "hi!");
    java.lang.String str36 = player35.toString();
    org.cs362.dominion.Player[] player_array37 = new org.cs362.dominion.Player[] { player35 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player38 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player38, player_array37);
    gameState32.players = arraylist_player38;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState32, "hi!");
    gameState32.initializeGame();
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    gameState32.addPlayer(player46);
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState32.cards;
    gameState28.cards = list_card48;
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    java.lang.String str54 = gameState53.toString();
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState53.cards;
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card57 = org.cs362.dominion.Card.getCard(list_card55, cardName56);
    org.cs362.dominion.Card.Type type58 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card55, type58);
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card48, type58);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card7, type58);
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card63);
    java.lang.String str66 = gameState65.toString();
    java.util.List<org.cs362.dominion.Card> list_card67 = gameState65.cards;
    org.cs362.dominion.Card.Type type68 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card69 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card67, type68);
    org.cs362.dominion.Card[] card_array70 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card71 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card71, card_array70);
    org.cs362.dominion.GameState gameState73 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card71);
    java.lang.String str74 = gameState73.toString();
    java.util.List<org.cs362.dominion.Card> list_card75 = gameState73.cards;
    org.cs362.dominion.Card.Type type76 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card77 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card75, type76);
    java.util.List<org.cs362.dominion.Card> list_card78 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card67, type76);
    org.cs362.dominion.Card[] card_array79 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card80 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b81 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card80, card_array79);
    org.cs362.dominion.GameState gameState82 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card80);
    java.lang.String str83 = gameState82.toString();
    java.util.List<org.cs362.dominion.Card> list_card84 = gameState82.cards;
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card86 = org.cs362.dominion.Card.getCard(list_card84, cardName85);
    org.cs362.dominion.Card.Type type87 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card88 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card84, type87);
    java.util.List<org.cs362.dominion.Card> list_card89 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card67, type87);
    java.util.List<org.cs362.dominion.Card> list_card90 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card61, type87);
    org.cs362.dominion.Card[] card_array91 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card92 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b93 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card92, card_array91);
    org.cs362.dominion.GameState gameState94 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card92);
    org.cs362.dominion.Card.Type type95 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card96 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card92, type95);
    org.cs362.dominion.Card.Type type97 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card98 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card92, type97);
    java.util.List<org.cs362.dominion.Card> list_card99 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card61, type97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str36.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type58.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str66.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type68.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str74.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type76.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str83.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card86);
    org.junit.Assert.assertTrue("'" + type87 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type87.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    org.junit.Assert.assertTrue("'" + type95 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type95.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card96);
    org.junit.Assert.assertTrue("'" + type97 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type97.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card99);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i7 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    player21.playTtreasureCard();
    player21.playKingdomCard();
    org.cs362.dominion.Card card24 = null;
    player21.discard(card24);
    player21.playTtreasureCard();
    player21.buyCard();
    player21.printStateGame();
    gameState3.addPlayer(player21);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.lang.String str35 = gameState33.toString();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState3.addPlayer(player37);
    boolean b39 = gameState3.isGameOver();
    // The following exception was thrown during execution in test generation
    try {
    gameState3.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.Card.CardName cardName1 = org.cs362.dominion.Card.CardName.Smithy;
    // The following exception was thrown during execution in test generation
    try {
    org.cs362.dominion.Card card2 = org.cs362.dominion.Card.getCard(list_card0, cardName1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    org.junit.Assert.assertTrue("'" + cardName1 + "' != '" + org.cs362.dominion.Card.CardName.Smithy + "'", cardName1.equals(org.cs362.dominion.Card.CardName.Smithy));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    org.cs362.dominion.GameState gameState10 = null;
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState10, "hi!");
    java.lang.String str13 = player12.toString();
    org.cs362.dominion.Player[] player_array14 = new org.cs362.dominion.Player[] { player12 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player15 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player15, player_array14);
    gameState9.players = arraylist_player15;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState9, "hi!");
    player19.playTtreasureCard();
    player19.playKingdomCard();
    org.cs362.dominion.Card card22 = null;
    player19.discard(card22);
    player19.playTtreasureCard();
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.GameState gameState29 = null;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    java.lang.String str32 = player31.toString();
    org.cs362.dominion.Player[] player_array33 = new org.cs362.dominion.Player[] { player31 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player34 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player34, player_array33);
    gameState28.players = arraylist_player34;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState28.initializeGame();
    org.cs362.dominion.GameState gameState40 = null;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState28.addPlayer(player42);
    java.lang.String str44 = gameState28.toString();
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card46);
    org.cs362.dominion.GameState gameState49 = null;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState49, "hi!");
    java.lang.String str52 = player51.toString();
    org.cs362.dominion.Player[] player_array53 = new org.cs362.dominion.Player[] { player51 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player54 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player54, player_array53);
    gameState48.players = arraylist_player54;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState48, "hi!");
    gameState48.initializeGame();
    org.cs362.dominion.GameState gameState60 = null;
    org.cs362.dominion.Player player62 = new org.cs362.dominion.Player(gameState60, "hi!");
    gameState48.addPlayer(player62);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState48.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i65 = gameState48.getWinners();
    boolean b66 = gameState48.isGameOver();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.GameState gameState70 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card68);
    org.cs362.dominion.GameState gameState71 = null;
    org.cs362.dominion.Player player73 = new org.cs362.dominion.Player(gameState71, "hi!");
    java.lang.String str74 = player73.toString();
    org.cs362.dominion.Player[] player_array75 = new org.cs362.dominion.Player[] { player73 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player76 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player76, player_array75);
    gameState70.players = arraylist_player76;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState70, "hi!");
    gameState70.initializeGame();
    org.cs362.dominion.GameState gameState82 = null;
    org.cs362.dominion.Player player84 = new org.cs362.dominion.Player(gameState82, "hi!");
    gameState70.addPlayer(player84);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i86 = gameState70.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player87 = gameState70.players;
    gameState48.players = list_player87;
    gameState28.players = list_player87;
    card3.play(player19, gameState28);
    boolean b92 = card3.equals((java.lang.Object)" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str13.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str32.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str44.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str52.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str74.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    int i12 = card3.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 6);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card3);
    org.cs362.dominion.GameState gameState6 = null;
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState6, "hi!");
    java.lang.String str9 = player8.toString();
    org.cs362.dominion.Player[] player_array10 = new org.cs362.dominion.Player[] { player8 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player11 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player11, player_array10);
    gameState5.players = arraylist_player11;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState5, "hi!");
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    gameState5.cards = arraylist_card18;
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    player35.playTtreasureCard();
    gameState5.addPlayer(player35);
    gameState1.addPlayer(player35);
    player35.buyCard();
    player35.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.lang.String str15 = gameState3.toString();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    java.lang.String str20 = gameState19.toString();
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState19.cards;
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard(list_card21, cardName22);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card21, type24);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState(list_card25);
    gameState3.cards = list_card25;
    java.lang.String str28 = gameState3.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    java.lang.String str33 = gameState32.toString();
    gameState32.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player35 = gameState32.players;
    gameState3.players = list_player35;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str15.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card23);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type24.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player35);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    gameState19.addPlayer(player33);
    java.lang.String str37 = player33.toString();
    org.cs362.dominion.Card card38 = null;
    player33.discard(card38);
    player33.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str37.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.GameState gameState17 = null;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState17, "hi!");
    java.lang.String str20 = player19.toString();
    org.cs362.dominion.Player[] player_array21 = new org.cs362.dominion.Player[] { player19 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player22 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player22, player_array21);
    gameState16.players = arraylist_player22;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState16, "hi!");
    player26.playTtreasureCard();
    player26.playKingdomCard();
    org.cs362.dominion.Card card29 = null;
    player26.discard(card29);
    player26.playTtreasureCard();
    player26.buyCard();
    player26.playKingdomCard();
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card35);
    java.lang.String str38 = gameState37.toString();
    gameState37.initializeGame();
    org.cs362.dominion.GameState gameState40 = gameState37.clone();
    org.cs362.dominion.GameState gameState41 = gameState37.clone();
    boolean b42 = gameState37.isGameOver();
    card3.play(player26, gameState37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str38.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.GameState gameState22 = gameState3.clone();
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    gameState22.addPlayer(player25);
    player25.buyCard();
    // The following exception was thrown during execution in test generation
    try {
    player25.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    boolean b20 = gameState19.isGameOver();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    java.lang.String str25 = gameState24.toString();
    java.lang.String str26 = gameState24.toString();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState24, "hi!");
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    java.lang.String str33 = gameState32.toString();
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState32.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState32.getWinners();
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card37);
    org.cs362.dominion.GameState gameState40 = null;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, "hi!");
    java.lang.String str43 = player42.toString();
    org.cs362.dominion.Player[] player_array44 = new org.cs362.dominion.Player[] { player42 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player45 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player45, player_array44);
    gameState39.players = arraylist_player45;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState39, "hi!");
    gameState39.initializeGame();
    org.cs362.dominion.GameState gameState51 = null;
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState51, "hi!");
    gameState39.addPlayer(player53);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i55 = gameState39.gameBoard;
    gameState32.gameBoard = hashmap_card_i55;
    gameState24.gameBoard = hashmap_card_i55;
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card59);
    org.cs362.dominion.GameState gameState62 = null;
    org.cs362.dominion.Player player64 = new org.cs362.dominion.Player(gameState62, "hi!");
    java.lang.String str65 = player64.toString();
    org.cs362.dominion.Player[] player_array66 = new org.cs362.dominion.Player[] { player64 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player67 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player67, player_array66);
    gameState61.players = arraylist_player67;
    org.cs362.dominion.Player player71 = new org.cs362.dominion.Player(gameState61, "hi!");
    gameState61.initializeGame();
    org.cs362.dominion.GameState gameState73 = null;
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState73, "hi!");
    gameState61.addPlayer(player75);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i77 = gameState61.gameBoard;
    gameState24.gameBoard = hashmap_card_i77;
    gameState19.gameBoard = hashmap_card_i77;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str26.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str43.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str65.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i77);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.lang.String str12 = gameState11.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type14);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    java.lang.String str21 = gameState20.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card24 = org.cs362.dominion.Card.getCard(list_card22, cardName23);
    org.cs362.dominion.Card.Type type25 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card22, type25);
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type25);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    org.cs362.dominion.GameState gameState32 = null;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState32, "hi!");
    java.lang.String str35 = player34.toString();
    org.cs362.dominion.Player[] player_array36 = new org.cs362.dominion.Player[] { player34 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player37 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player37, player_array36);
    gameState31.players = arraylist_player37;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState31.initializeGame();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    gameState31.cards = arraylist_card44;
    org.cs362.dominion.GameState gameState47 = gameState31.clone();
    org.cs362.dominion.GameState gameState48 = gameState47.clone();
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.GameState gameState52 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card50);
    org.cs362.dominion.GameState gameState53 = null;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState53, "hi!");
    java.lang.String str56 = player55.toString();
    org.cs362.dominion.Player[] player_array57 = new org.cs362.dominion.Player[] { player55 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player58 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player58, player_array57);
    gameState52.players = arraylist_player58;
    org.cs362.dominion.Player player62 = new org.cs362.dominion.Player(gameState52, "hi!");
    gameState52.initializeGame();
    org.cs362.dominion.GameState gameState64 = null;
    org.cs362.dominion.Player player66 = new org.cs362.dominion.Player(gameState64, "hi!");
    gameState52.addPlayer(player66);
    java.util.List<org.cs362.dominion.Card> list_card68 = gameState52.cards;
    gameState48.cards = list_card68;
    org.cs362.dominion.Card[] card_array70 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card71 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card71, card_array70);
    org.cs362.dominion.GameState gameState73 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card71);
    java.lang.String str74 = gameState73.toString();
    java.util.List<org.cs362.dominion.Card> list_card75 = gameState73.cards;
    org.cs362.dominion.Card.CardName cardName76 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card77 = org.cs362.dominion.Card.getCard(list_card75, cardName76);
    org.cs362.dominion.Card.Type type78 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card79 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card75, type78);
    java.util.List<org.cs362.dominion.Card> list_card80 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card68, type78);
    java.util.List<org.cs362.dominion.Card> list_card81 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card27, type78);
    org.cs362.dominion.Card.CardName cardName82 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card83 = org.cs362.dominion.Card.getCard(list_card81, cardName82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type25.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str56.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str74.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + cardName76 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName76.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);
    org.junit.Assert.assertTrue("'" + type78 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type78.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    org.junit.Assert.assertTrue("'" + cardName82 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName82.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card83);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    gameState20.cards = list_card40;
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    org.cs362.dominion.GameState gameState47 = null;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState47, "hi!");
    java.lang.String str50 = player49.toString();
    org.cs362.dominion.Player[] player_array51 = new org.cs362.dominion.Player[] { player49 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player52 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player52, player_array51);
    gameState46.players = arraylist_player52;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i55 = gameState46.play();
    org.cs362.dominion.Player player57 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i58 = gameState46.play();
    org.cs362.dominion.Player player60 = new org.cs362.dominion.Player(gameState46, "");
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.createCards();
    gameState46.cards = list_card61;
    org.cs362.dominion.Player player64 = new org.cs362.dominion.Player(gameState46, "hi!");
    gameState20.addPlayer(player64);
    java.lang.String str66 = gameState20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str50.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str66.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    int i11 = card9.getTreasureValue();
    org.cs362.dominion.Card.CardName cardName12 = card9.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    player20.playTtreasureCard();
    player20.playTtreasureCard();
    gameState3.addPlayer(player20);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i24 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i24);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    gameState20.cards = list_card40;
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    java.lang.String str46 = gameState45.toString();
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState45.cards;
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard(list_card47, cardName48);
    org.cs362.dominion.Card.Type type50 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card47, type50);
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card40, type50);
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card54);
    java.lang.String str57 = gameState56.toString();
    java.util.List<org.cs362.dominion.Card> list_card58 = gameState56.cards;
    org.cs362.dominion.Card.Type type59 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card58, type59);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card52, type59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState(list_card52);
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    org.cs362.dominion.GameState gameState66 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card64);
    org.cs362.dominion.GameState gameState67 = null;
    org.cs362.dominion.Player player69 = new org.cs362.dominion.Player(gameState67, "hi!");
    java.lang.String str70 = player69.toString();
    org.cs362.dominion.Player[] player_array71 = new org.cs362.dominion.Player[] { player69 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player72 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player72, player_array71);
    gameState66.players = arraylist_player72;
    org.cs362.dominion.Player player76 = new org.cs362.dominion.Player(gameState66, "hi!");
    player76.playTtreasureCard();
    player76.playKingdomCard();
    org.cs362.dominion.Card card79 = null;
    player76.discard(card79);
    player76.playTtreasureCard();
    player76.buyCard();
    player76.printStateGame();
    player76.printStateGame();
    gameState62.addPlayer(player76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str46.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card49);
    org.junit.Assert.assertTrue("'" + type50 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type50.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str57.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + type59 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type59.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str70.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState3.players;
    java.lang.String str21 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState3.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card3);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card3, type6);
    gameState1.cards = arraylist_card3;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card6);
    java.lang.String str9 = gameState8.toString();
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    boolean b11 = gameState8.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.Card.Type type17 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card14, type17);
    org.cs362.dominion.Card.Type type19 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card14, type19);
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card12, type19);
    gameState8.cards = list_card21;
    gameState3.cards = list_card21;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    java.lang.String str26 = player25.toString();
    java.lang.String str27 = player25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type17.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type19.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card7 = org.cs362.dominion.Card.getCard(list_card5, cardName6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState8.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState3, "");
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card19);
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    java.lang.String str25 = player24.toString();
    org.cs362.dominion.Player[] player_array26 = new org.cs362.dominion.Player[] { player24 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player27 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player27, player_array26);
    gameState21.players = arraylist_player27;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str32 = gameState21.toString();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState21, "The board game is embty you need to intialize the game!!!!");
    gameState3.addPlayer(player34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str25.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str32.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Player player9 = new org.cs362.dominion.Player(gameState3, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    java.util.List<org.cs362.dominion.Card> list_card24 = gameState3.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i22 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type7 = card3.getType();
    int i8 = card3.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    player16.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i7 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    player21.playTtreasureCard();
    player21.playKingdomCard();
    org.cs362.dominion.Card card24 = null;
    player21.discard(card24);
    player21.playTtreasureCard();
    player21.buyCard();
    player21.printStateGame();
    gameState3.addPlayer(player21);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.lang.String str35 = gameState33.toString();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState3.addPlayer(player37);
    boolean b39 = gameState3.isGameOver();
    org.cs362.dominion.GameState gameState40 = gameState3.clone();
    // The following exception was thrown during execution in test generation
    try {
    gameState3.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState3.play();
    boolean b20 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    java.lang.String str25 = gameState24.toString();
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type27);
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    java.lang.String str39 = player38.toString();
    org.cs362.dominion.Player[] player_array40 = new org.cs362.dominion.Player[] { player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player41 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player41, player_array40);
    gameState35.players = arraylist_player41;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState35.play();
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState35, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i47 = gameState35.play();
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState35, "");
    gameState29.addPlayer(player49);
    gameState3.addPlayer(player49);
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card53);
    org.cs362.dominion.GameState gameState56 = null;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState56, "hi!");
    java.lang.String str59 = player58.toString();
    org.cs362.dominion.Player[] player_array60 = new org.cs362.dominion.Player[] { player58 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player61 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player61, player_array60);
    gameState55.players = arraylist_player61;
    org.cs362.dominion.Player player65 = new org.cs362.dominion.Player(gameState55, "hi!");
    player65.playTtreasureCard();
    player65.playKingdomCard();
    org.cs362.dominion.Card card68 = null;
    player65.discard(card68);
    player65.playTtreasureCard();
    player65.buyCard();
    player65.playKingdomCard();
    player65.playKingdomCard();
    player65.buyCard();
    java.lang.String str75 = player65.toString();
    gameState3.addPlayer(player65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str39.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str59.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str75.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.lang.String str5 = gameState3.toString();
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.lang.String str12 = gameState11.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i14 = gameState11.getWinners();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i34 = gameState18.gameBoard;
    gameState11.gameBoard = hashmap_card_i34;
    gameState3.gameBoard = hashmap_card_i34;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState3.cards;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState3, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    java.lang.String str18 = player13.toString();
    java.lang.String str19 = player13.toString();
    player13.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.GameState gameState17 = null;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState17, "hi!");
    java.lang.String str20 = player19.toString();
    org.cs362.dominion.Player[] player_array21 = new org.cs362.dominion.Player[] { player19 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player22 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player22, player_array21);
    gameState16.players = arraylist_player22;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState16.initializeGame();
    org.cs362.dominion.GameState gameState28 = null;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState16.addPlayer(player30);
    player30.playKingdomCard();
    gameState3.addPlayer(player30);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i34 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i34);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card6);
    java.lang.String str9 = gameState8.toString();
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState8.cards;
    boolean b11 = gameState8.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.Card.Type type17 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card14, type17);
    org.cs362.dominion.Card.Type type19 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card14, type19);
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card12, type19);
    gameState8.cards = list_card21;
    gameState3.cards = list_card21;
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.Card.Type type28 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card29 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card25, type28);
    org.cs362.dominion.Card.Type type30 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card25, type30);
    org.cs362.dominion.Card.Type type32 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card33 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card25, type32);
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card21, type32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type17.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type19.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    org.junit.Assert.assertTrue("'" + type28 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type28.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    org.junit.Assert.assertTrue("'" + type30 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type30.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    org.junit.Assert.assertTrue("'" + type32 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type32.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playTtreasureCard();
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    gameState3.cards = list_card27;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState3.gameBoard;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState3, "");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card10);
    org.cs362.dominion.Card.Type type13 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card10, type13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card10, type15);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    gameState20.cards = arraylist_card33;
    org.cs362.dominion.GameState gameState36 = gameState20.clone();
    org.cs362.dominion.GameState gameState37 = gameState36.clone();
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    gameState41.initializeGame();
    org.cs362.dominion.GameState gameState53 = null;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState53, "hi!");
    gameState41.addPlayer(player55);
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState41.cards;
    gameState37.cards = list_card57;
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card60);
    java.lang.String str63 = gameState62.toString();
    java.util.List<org.cs362.dominion.Card> list_card64 = gameState62.cards;
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card66 = org.cs362.dominion.Card.getCard(list_card64, cardName65);
    org.cs362.dominion.Card.Type type67 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card68 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card64, type67);
    java.util.List<org.cs362.dominion.Card> list_card69 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card57, type67);
    java.util.List<org.cs362.dominion.Card> list_card70 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card16, type67);
    gameState8.cards = list_card16;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type13.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type15.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str63.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card66);
    org.junit.Assert.assertTrue("'" + type67 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type67.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    gameState3.cards = arraylist_card18;
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    java.lang.String str32 = gameState31.toString();
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState31.cards;
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard(list_card33, cardName34);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card33, type36);
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type36);
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str32.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type36.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState23.play();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState23.play();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState23, "");
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str52 = gameState41.toString();
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState41, "The board game is embty you need to intialize the game!!!!");
    gameState23.addPlayer(player54);
    gameState19.addPlayer(player54);
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState(list_card57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard(list_card57, cardName59);
    player54.discard(card60);
    player54.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str52.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card60);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.GameState gameState17 = null;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState17, "hi!");
    java.lang.String str20 = player19.toString();
    org.cs362.dominion.Player[] player_array21 = new org.cs362.dominion.Player[] { player19 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player22 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player22, player_array21);
    gameState16.players = arraylist_player22;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState16.initializeGame();
    org.cs362.dominion.GameState gameState28 = null;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState16.addPlayer(player30);
    player30.playKingdomCard();
    gameState3.addPlayer(player30);
    player30.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    org.cs362.dominion.Card card4 = null;
    player2.discard(card4);
    player2.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str3.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i7 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    player21.playTtreasureCard();
    player21.playKingdomCard();
    org.cs362.dominion.Card card24 = null;
    player21.discard(card24);
    player21.playTtreasureCard();
    player21.buyCard();
    player21.printStateGame();
    gameState3.addPlayer(player21);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.lang.String str35 = gameState33.toString();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState3.addPlayer(player37);
    // The following exception was thrown during execution in test generation
    try {
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState3.play();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState3.players;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card21, type24);
    gameState3.cards = arraylist_card21;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState3, "");
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.createCards();
    gameState3.cards = list_card18;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState3, "hi!");
    player21.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str3.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    gameState20.cards = arraylist_card33;
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    player50.playTtreasureCard();
    gameState20.addPlayer(player50);
    gameState3.addPlayer(player50);
    java.lang.String str54 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    player32.playKingdomCard();
    gameState3.addPlayer(player32);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState3.cards;
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    java.lang.String str41 = gameState40.toString();
    java.util.List<org.cs362.dominion.Card> list_card42 = gameState40.cards;
    org.cs362.dominion.Card.Type type43 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card44 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card42, type43);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card46);
    java.lang.String str49 = gameState48.toString();
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    org.cs362.dominion.Card.Type type51 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card50, type51);
    java.util.List<org.cs362.dominion.Card> list_card53 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card42, type51);
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.GameState gameState57 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card55);
    java.lang.String str58 = gameState57.toString();
    java.util.List<org.cs362.dominion.Card> list_card59 = gameState57.cards;
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard(list_card59, cardName60);
    org.cs362.dominion.Card.Type type62 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card59, type62);
    java.util.List<org.cs362.dominion.Card> list_card64 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card42, type62);
    java.util.List<org.cs362.dominion.Card> list_card65 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card36, type62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str41.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card42);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type43.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str49.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + type51 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type51.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str58.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card61);
    org.junit.Assert.assertTrue("'" + type62 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type62.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card65);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    player32.playKingdomCard();
    gameState3.addPlayer(player32);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState3.cards;
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState40.initializeGame();
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    gameState40.cards = arraylist_card53;
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card53);
    java.lang.String str57 = gameState56.toString();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card59);
    java.lang.String str62 = gameState61.toString();
    java.util.List<org.cs362.dominion.Card> list_card63 = gameState61.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i64 = gameState61.getWinners();
    org.cs362.dominion.Card[] card_array65 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card66, card_array65);
    org.cs362.dominion.GameState gameState68 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card66);
    org.cs362.dominion.GameState gameState69 = null;
    org.cs362.dominion.Player player71 = new org.cs362.dominion.Player(gameState69, "hi!");
    java.lang.String str72 = player71.toString();
    org.cs362.dominion.Player[] player_array73 = new org.cs362.dominion.Player[] { player71 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player74 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player74, player_array73);
    gameState68.players = arraylist_player74;
    org.cs362.dominion.Player player78 = new org.cs362.dominion.Player(gameState68, "hi!");
    gameState68.initializeGame();
    org.cs362.dominion.GameState gameState80 = null;
    org.cs362.dominion.Player player82 = new org.cs362.dominion.Player(gameState80, "hi!");
    gameState68.addPlayer(player82);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i84 = gameState68.gameBoard;
    gameState61.gameBoard = hashmap_card_i84;
    gameState56.gameBoard = hashmap_card_i84;
    gameState3.gameBoard = hashmap_card_i84;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i88 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str57.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str62.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str72.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i88);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playTtreasureCard();
    player13.buyCard();
    player13.playKingdomCard();
    player13.playKingdomCard();
    player13.buyCard();
    player13.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    gameState3.cards = list_card27;
    // The following exception was thrown during execution in test generation
    try {
    gameState3.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    gameState3.initializeGame();
    java.lang.String str21 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState3.gameBoard;
    boolean b23 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    org.cs362.dominion.Player[] player_array27 = new org.cs362.dominion.Player[] { player25 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player28 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player28, player_array27);
    gameState22.players = arraylist_player28;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState22.initializeGame();
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    gameState22.cards = arraylist_card35;
    gameState22.initializeGame();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card40);
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    java.lang.String str46 = player45.toString();
    org.cs362.dominion.Player[] player_array47 = new org.cs362.dominion.Player[] { player45 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player48 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player48, player_array47);
    gameState42.players = arraylist_player48;
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState42, "hi!");
    player52.playTtreasureCard();
    gameState22.addPlayer(player52);
    gameState3.addPlayer(player52);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i56 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState57 = gameState3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str46.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState57);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState8.play();
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card11);
    org.cs362.dominion.GameState gameState14 = null;
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState14, "hi!");
    java.lang.String str17 = player16.toString();
    org.cs362.dominion.Player[] player_array18 = new org.cs362.dominion.Player[] { player16 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player19 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player19, player_array18);
    gameState13.players = arraylist_player19;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState13, "hi!");
    gameState8.addPlayer(player23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array1 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card2, card_array1);
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card2);
    java.lang.String str5 = gameState4.toString();
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card0, type7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.GameState gameState11 = gameState10.clone();
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card13);
    java.lang.String str16 = gameState15.toString();
    java.util.List<org.cs362.dominion.Card> list_card17 = gameState15.cards;
    org.cs362.dominion.Card.Type type18 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card19 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card17, type18);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState(list_card17);
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState20, "hi!");
    player22.buyCard();
    player22.playTtreasureCard();
    gameState10.addPlayer(player22);
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card27);
    java.lang.String str30 = gameState29.toString();
    gameState29.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player32 = gameState29.players;
    java.util.List<org.cs362.dominion.Player> list_player33 = gameState29.players;
    java.util.List<org.cs362.dominion.Player> list_player34 = gameState29.players;
    gameState10.players = list_player34;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card17);
    org.junit.Assert.assertTrue("'" + type18 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type18.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str30.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player34);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState3.getWinners();
    java.lang.String str7 = gameState3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str7.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState3, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    org.cs362.dominion.GameState gameState17 = gameState3.clone();
    gameState17.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    org.cs362.dominion.Card.Type type6 = card3.getType();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState10.gameBoard;
    java.lang.String str23 = gameState10.toString();
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.GameState gameState28 = null;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState28, "hi!");
    java.lang.String str31 = player30.toString();
    org.cs362.dominion.Player[] player_array32 = new org.cs362.dominion.Player[] { player30 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player33 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player33, player_array32);
    gameState27.players = arraylist_player33;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState27, "hi!");
    gameState27.initializeGame();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    gameState27.cards = arraylist_card40;
    gameState27.initializeGame();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    org.cs362.dominion.GameState gameState47 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card45);
    org.cs362.dominion.GameState gameState48 = null;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState48, "hi!");
    java.lang.String str51 = player50.toString();
    org.cs362.dominion.Player[] player_array52 = new org.cs362.dominion.Player[] { player50 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player53 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player53, player_array52);
    gameState47.players = arraylist_player53;
    org.cs362.dominion.Player player57 = new org.cs362.dominion.Player(gameState47, "hi!");
    player57.playTtreasureCard();
    gameState27.addPlayer(player57);
    gameState10.addPlayer(player57);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState(list_card61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard(list_card61, cardName63);
    java.lang.Object obj65 = null;
    boolean b66 = card64.equals(obj65);
    java.util.List<org.cs362.dominion.Card> list_card67 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState68 = new org.cs362.dominion.GameState(list_card67);
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card70 = org.cs362.dominion.Card.getCard(list_card67, cardName69);
    int i71 = card64.compareTo(card70);
    player57.discard(card64);
    org.cs362.dominion.Card[] card_array73 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card74 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card74, card_array73);
    org.cs362.dominion.GameState gameState76 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card74);
    java.lang.String str77 = gameState76.toString();
    java.util.List<org.cs362.dominion.Card> list_card78 = gameState76.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i79 = gameState76.getWinners();
    card3.play(player57, gameState76);
    org.cs362.dominion.Card.CardName cardName81 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str23.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str31.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str51.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str77.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i79);
    org.junit.Assert.assertTrue("'" + cardName81 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName81.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState3, "");
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.createCards();
    gameState3.cards = list_card18;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    gameState3.players = arraylist_player29;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type7 = card3.getType();
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard(list_card8, cardName10);
    java.lang.Object obj12 = null;
    boolean b13 = card11.equals(obj12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard(list_card14, cardName16);
    int i18 = card11.compareTo(card17);
    int i19 = card17.getTreasureValue();
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard(list_card20, cardName22);
    java.lang.Object obj24 = null;
    boolean b25 = card23.equals(obj24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard(list_card26, cardName28);
    int i30 = card23.compareTo(card29);
    int i31 = card17.compareTo(card29);
    int i32 = card3.compareTo(card29);
    java.lang.String str33 = card3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " \n\tGold"+ "'", str33.equals(" \n\tGold"));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    gameState6.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player8 = gameState6.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player8);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.GameState gameState22 = gameState3.clone();
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    gameState22.addPlayer(player25);
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card28);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard(list_card28, cardName30);
    java.lang.Object obj32 = null;
    boolean b33 = card31.equals(obj32);
    player25.discard(card31);
    int i35 = card31.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 6);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i21 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    gameState25.initializeGame();
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    gameState25.addPlayer(player39);
    java.lang.String str41 = gameState25.toString();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.lang.String str49 = player48.toString();
    org.cs362.dominion.Player[] player_array50 = new org.cs362.dominion.Player[] { player48 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player51 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player51, player_array50);
    gameState45.players = arraylist_player51;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState45.initializeGame();
    org.cs362.dominion.GameState gameState57 = null;
    org.cs362.dominion.Player player59 = new org.cs362.dominion.Player(gameState57, "hi!");
    gameState45.addPlayer(player59);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i61 = gameState45.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i62 = gameState45.getWinners();
    boolean b63 = gameState45.isGameOver();
    org.cs362.dominion.Card[] card_array64 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card65 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b66 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card65, card_array64);
    org.cs362.dominion.GameState gameState67 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card65);
    org.cs362.dominion.GameState gameState68 = null;
    org.cs362.dominion.Player player70 = new org.cs362.dominion.Player(gameState68, "hi!");
    java.lang.String str71 = player70.toString();
    org.cs362.dominion.Player[] player_array72 = new org.cs362.dominion.Player[] { player70 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player73 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player73, player_array72);
    gameState67.players = arraylist_player73;
    org.cs362.dominion.Player player77 = new org.cs362.dominion.Player(gameState67, "hi!");
    gameState67.initializeGame();
    org.cs362.dominion.GameState gameState79 = null;
    org.cs362.dominion.Player player81 = new org.cs362.dominion.Player(gameState79, "hi!");
    gameState67.addPlayer(player81);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i83 = gameState67.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player84 = gameState67.players;
    gameState45.players = list_player84;
    gameState25.players = list_player84;
    gameState3.players = list_player84;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i88 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str41.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str49.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str71.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i88);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.buyCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.printStateGame();
    player13.playKingdomCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    gameState24.cards = arraylist_card37;
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card37);
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.GameState gameState44 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card42);
    org.cs362.dominion.GameState gameState45 = null;
    org.cs362.dominion.Player player47 = new org.cs362.dominion.Player(gameState45, "hi!");
    java.lang.String str48 = player47.toString();
    org.cs362.dominion.Player[] player_array49 = new org.cs362.dominion.Player[] { player47 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player50 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player50, player_array49);
    gameState44.players = arraylist_player50;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i53 = gameState44.play();
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState44, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i56 = gameState44.play();
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState44, "");
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card60);
    org.cs362.dominion.GameState gameState63 = null;
    org.cs362.dominion.Player player65 = new org.cs362.dominion.Player(gameState63, "hi!");
    java.lang.String str66 = player65.toString();
    org.cs362.dominion.Player[] player_array67 = new org.cs362.dominion.Player[] { player65 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player68 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player68, player_array67);
    gameState62.players = arraylist_player68;
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState62, "hi!");
    java.lang.String str73 = gameState62.toString();
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState62, "The board game is embty you need to intialize the game!!!!");
    gameState44.addPlayer(player75);
    gameState40.addPlayer(player75);
    java.util.List<org.cs362.dominion.Card> list_card78 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState79 = new org.cs362.dominion.GameState(list_card78);
    org.cs362.dominion.Card.CardName cardName80 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card81 = org.cs362.dominion.Card.getCard(list_card78, cardName80);
    player75.discard(card81);
    int i83 = card81.score();
    player13.discard(card81);
    java.lang.String str85 = player13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str48.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str66.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str73.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    org.junit.Assert.assertTrue("'" + cardName80 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName80.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null,  \n\tGold]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str85.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null,  \n\tGold]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.GameState gameState17 = null;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState17, "hi!");
    java.lang.String str20 = player19.toString();
    org.cs362.dominion.Player[] player_array21 = new org.cs362.dominion.Player[] { player19 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player22 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player22, player_array21);
    gameState16.players = arraylist_player22;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState16, "hi!");
    gameState16.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i28 = gameState16.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState16.gameBoard;
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "");
    gameState16.addPlayer(player37);
    boolean b39 = card3.equals((java.lang.Object)player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i16 = gameState3.getWinners();
    java.lang.String str17 = gameState3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str17.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState8.getWinners();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState8.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    player32.playKingdomCard();
    gameState3.addPlayer(player32);
    player32.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    boolean b8 = gameState3.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    int i7 = card3.getTreasureValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 3);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    gameState20.cards = list_card40;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState20.players;
    gameState20.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.lang.String str12 = gameState11.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type14);
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    java.lang.String str20 = gameState19.toString();
    java.util.List<org.cs362.dominion.Card> list_card21 = gameState19.cards;
    org.cs362.dominion.Card.Type type22 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card21, type22);
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type22);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    java.lang.String str29 = gameState28.toString();
    java.util.List<org.cs362.dominion.Card> list_card30 = gameState28.cards;
    org.cs362.dominion.Card.CardName cardName31 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card32 = org.cs362.dominion.Card.getCard(list_card30, cardName31);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card30, type33);
    java.util.List<org.cs362.dominion.Card> list_card35 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type33);
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card7, type33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    org.junit.Assert.assertTrue("'" + type22 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type22.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str29.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    org.junit.Assert.assertTrue("'" + cardName31 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName31.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card32);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type33.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    player14.playKingdomCard();
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard(list_card16, cardName18);
    java.lang.Object obj20 = null;
    boolean b21 = card19.equals(obj20);
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard(list_card22, cardName24);
    int i26 = card19.compareTo(card25);
    player14.discard(card19);
    org.cs362.dominion.Card.CardName cardName28 = card19.getCardName();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.GameState gameState33 = null;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState33, "hi!");
    java.lang.String str36 = player35.toString();
    org.cs362.dominion.Player[] player_array37 = new org.cs362.dominion.Player[] { player35 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player38 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player38, player_array37);
    gameState32.players = arraylist_player38;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState32, "hi!");
    player42.playTtreasureCard();
    player42.playTtreasureCard();
    org.cs362.dominion.Card card45 = null;
    player42.discard(card45);
    java.lang.String str47 = player42.toString();
    java.lang.String str48 = player42.toString();
    player42.playTtreasureCard();
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    org.cs362.dominion.GameState gameState54 = null;
    org.cs362.dominion.Player player56 = new org.cs362.dominion.Player(gameState54, "hi!");
    java.lang.String str57 = player56.toString();
    org.cs362.dominion.Player[] player_array58 = new org.cs362.dominion.Player[] { player56 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player59 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player59, player_array58);
    gameState53.players = arraylist_player59;
    org.cs362.dominion.Player player63 = new org.cs362.dominion.Player(gameState53, "hi!");
    gameState53.initializeGame();
    org.cs362.dominion.GameState gameState65 = null;
    org.cs362.dominion.Player player67 = new org.cs362.dominion.Player(gameState65, "hi!");
    gameState53.addPlayer(player67);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i69 = gameState53.gameBoard;
    card19.play(player42, gameState53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str36.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str47.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str48.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str57.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i69);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    player20.playTtreasureCard();
    player20.playTtreasureCard();
    gameState3.addPlayer(player20);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.GameState gameState28 = null;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState28, "hi!");
    java.lang.String str31 = player30.toString();
    org.cs362.dominion.Player[] player_array32 = new org.cs362.dominion.Player[] { player30 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player33 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player33, player_array32);
    gameState27.players = arraylist_player33;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState27, "hi!");
    gameState27.initializeGame();
    org.cs362.dominion.GameState gameState39 = null;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState39, "hi!");
    gameState27.addPlayer(player41);
    java.util.List<org.cs362.dominion.Card> list_card43 = gameState27.cards;
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState27.cards;
    gameState3.cards = list_card44;
    org.cs362.dominion.Card.Type type46 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card44, type46);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str31.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type46.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState9.getWinners();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i11 = gameState9.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i11);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    java.lang.String str20 = gameState19.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState19.getWinners();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState19.gameBoard;
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    java.lang.String str27 = gameState26.toString();
    gameState26.initializeGame();
    org.cs362.dominion.GameState gameState29 = gameState26.clone();
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    org.cs362.dominion.GameState gameState34 = null;
    org.cs362.dominion.Player player36 = new org.cs362.dominion.Player(gameState34, "hi!");
    java.lang.String str37 = player36.toString();
    org.cs362.dominion.Player[] player_array38 = new org.cs362.dominion.Player[] { player36 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player39 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player39, player_array38);
    gameState33.players = arraylist_player39;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState33.initializeGame();
    org.cs362.dominion.GameState gameState45 = null;
    org.cs362.dominion.Player player47 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState33.addPlayer(player47);
    java.util.List<org.cs362.dominion.Card> list_card49 = gameState33.cards;
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState33.cards;
    java.lang.String str51 = gameState33.toString();
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card53);
    org.cs362.dominion.Card.Type type56 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card53, type56);
    gameState33.cards = list_card57;
    gameState29.cards = list_card57;
    gameState19.cards = list_card57;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str27.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str37.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str51.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + type56 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type56.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState10.addPlayer(player24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState10.cards;
    java.lang.String str28 = gameState10.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type33);
    gameState10.cards = list_card34;
    gameState6.cards = list_card34;
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState40.initializeGame();
    org.cs362.dominion.GameState gameState52 = null;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState52, "hi!");
    gameState40.addPlayer(player54);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState40.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i57 = gameState40.getWinners();
    boolean b58 = gameState40.isGameOver();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card60);
    org.cs362.dominion.GameState gameState63 = null;
    org.cs362.dominion.Player player65 = new org.cs362.dominion.Player(gameState63, "hi!");
    java.lang.String str66 = player65.toString();
    org.cs362.dominion.Player[] player_array67 = new org.cs362.dominion.Player[] { player65 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player68 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player68, player_array67);
    gameState62.players = arraylist_player68;
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState62, "hi!");
    gameState62.initializeGame();
    org.cs362.dominion.GameState gameState74 = null;
    org.cs362.dominion.Player player76 = new org.cs362.dominion.Player(gameState74, "hi!");
    gameState62.addPlayer(player76);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i78 = gameState62.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player79 = gameState62.players;
    gameState40.players = list_player79;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i81 = gameState40.gameBoard;
    gameState6.gameBoard = hashmap_card_i81;
    boolean b83 = gameState6.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type33.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str66.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    java.lang.String str12 = gameState11.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = gameState11.cards;
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card13, type14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type14);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    java.lang.String str21 = gameState20.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    org.cs362.dominion.Card.CardName cardName23 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card24 = org.cs362.dominion.Card.getCard(list_card22, cardName23);
    org.cs362.dominion.Card.Type type25 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card22, type25);
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str12.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName23 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName23.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type25.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    gameState11.initializeGame();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    gameState11.cards = arraylist_card24;
    org.cs362.dominion.GameState gameState27 = gameState11.clone();
    org.cs362.dominion.GameState gameState28 = gameState27.clone();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.GameState gameState33 = null;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState33, "hi!");
    java.lang.String str36 = player35.toString();
    org.cs362.dominion.Player[] player_array37 = new org.cs362.dominion.Player[] { player35 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player38 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player38, player_array37);
    gameState32.players = arraylist_player38;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState32, "hi!");
    gameState32.initializeGame();
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    gameState32.addPlayer(player46);
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState32.cards;
    gameState28.cards = list_card48;
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    java.lang.String str54 = gameState53.toString();
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState53.cards;
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card57 = org.cs362.dominion.Card.getCard(list_card55, cardName56);
    org.cs362.dominion.Card.Type type58 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card55, type58);
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card48, type58);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card7, type58);
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card63);
    java.lang.String str66 = gameState65.toString();
    java.util.List<org.cs362.dominion.Card> list_card67 = gameState65.cards;
    org.cs362.dominion.Card.Type type68 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card69 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card67, type68);
    org.cs362.dominion.Card[] card_array70 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card71 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card71, card_array70);
    org.cs362.dominion.GameState gameState73 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card71);
    java.lang.String str74 = gameState73.toString();
    java.util.List<org.cs362.dominion.Card> list_card75 = gameState73.cards;
    org.cs362.dominion.Card.Type type76 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card77 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card75, type76);
    java.util.List<org.cs362.dominion.Card> list_card78 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card67, type76);
    org.cs362.dominion.Card[] card_array79 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card80 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b81 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card80, card_array79);
    org.cs362.dominion.GameState gameState82 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card80);
    java.lang.String str83 = gameState82.toString();
    java.util.List<org.cs362.dominion.Card> list_card84 = gameState82.cards;
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card86 = org.cs362.dominion.Card.getCard(list_card84, cardName85);
    org.cs362.dominion.Card.Type type87 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card88 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card84, type87);
    java.util.List<org.cs362.dominion.Card> list_card89 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card67, type87);
    java.util.List<org.cs362.dominion.Card> list_card90 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card61, type87);
    org.cs362.dominion.Card[] card_array91 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card92 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b93 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card92, card_array91);
    org.cs362.dominion.GameState gameState94 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card92);
    org.cs362.dominion.Card.Type type95 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card96 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card92, type95);
    org.cs362.dominion.Card.Type type97 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card98 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card92, type97);
    java.util.List<org.cs362.dominion.Card> list_card99 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card90, type97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str36.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type58.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str66.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card67);
    org.junit.Assert.assertTrue("'" + type68 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type68.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str74.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type76.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str83.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card84);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card86);
    org.junit.Assert.assertTrue("'" + type87 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type87.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    org.junit.Assert.assertTrue("'" + type95 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type95.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card96);
    org.junit.Assert.assertTrue("'" + type97 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type97.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card99);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.GameState gameState22 = gameState3.clone();
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    gameState22.addPlayer(player25);
    player25.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    java.lang.Object obj7 = null;
    boolean b8 = card3.equals(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    gameState25.initializeGame();
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    gameState25.addPlayer(player39);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState25.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState25.players;
    gameState3.players = list_player42;
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playTtreasureCard();
    player13.buyCard();
    player13.buyCard();
    org.cs362.dominion.Card card21 = null;
    player13.discard(card21);
    player13.buyCard();
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type7 = card3.getType();
    int i8 = card3.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 6);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.GameState gameState8 = gameState3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    org.cs362.dominion.Player player10 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    java.lang.String str18 = player17.toString();
    org.cs362.dominion.Player[] player_array19 = new org.cs362.dominion.Player[] { player17 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player20 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player20, player_array19);
    gameState14.players = arraylist_player20;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i23 = gameState14.play();
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState14, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i26 = gameState14.play();
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState14, "");
    gameState8.addPlayer(player28);
    player28.playKingdomCard();
    player28.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i26);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState23.play();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState23.play();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState23, "");
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str52 = gameState41.toString();
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState41, "The board game is embty you need to intialize the game!!!!");
    gameState23.addPlayer(player54);
    gameState19.addPlayer(player54);
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState(list_card57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard(list_card57, cardName59);
    player54.discard(card60);
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState63 = new org.cs362.dominion.GameState(list_card62);
    org.cs362.dominion.Card.CardName cardName64 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card65 = org.cs362.dominion.Card.getCard(list_card62, cardName64);
    java.lang.Object obj66 = null;
    boolean b67 = card65.equals(obj66);
    java.util.List<org.cs362.dominion.Card> list_card68 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState69 = new org.cs362.dominion.GameState(list_card68);
    org.cs362.dominion.Card.CardName cardName70 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card71 = org.cs362.dominion.Card.getCard(list_card68, cardName70);
    int i72 = card65.compareTo(card71);
    java.lang.String str73 = card65.toString();
    java.lang.String str74 = card65.toString();
    java.util.List<org.cs362.dominion.Card> list_card75 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState76 = new org.cs362.dominion.GameState(list_card75);
    org.cs362.dominion.Card.CardName cardName77 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card78 = org.cs362.dominion.Card.getCard(list_card75, cardName77);
    int i79 = card78.getTreasureValue();
    int i80 = card65.compareTo(card78);
    player54.discard(card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str52.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName64.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + cardName70 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName70.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + " \n\tGold"+ "'", str73.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + " \n\tGold"+ "'", str74.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    org.junit.Assert.assertTrue("'" + cardName77 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName77.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == 0);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState10.addPlayer(player24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState10.cards;
    java.lang.String str28 = gameState10.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type33);
    gameState10.cards = list_card34;
    gameState6.cards = list_card34;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState(list_card37);
    org.cs362.dominion.Card.CardName cardName39 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card40 = org.cs362.dominion.Card.getCard(list_card37, cardName39);
    java.lang.Object obj41 = null;
    boolean b42 = card40.equals(obj41);
    int i43 = card40.getTreasureValue();
    org.cs362.dominion.Card.Type type44 = card40.getType();
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card34, type44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type33.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + cardName39 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName39.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 3);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type44.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    gameState23.cards = arraylist_card36;
    gameState3.cards = arraylist_card36;
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    int i11 = card9.getTreasureValue();
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard(list_card12, cardName14);
    java.lang.Object obj16 = null;
    boolean b17 = card15.equals(obj16);
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard(list_card18, cardName20);
    int i22 = card15.compareTo(card21);
    int i23 = card9.compareTo(card21);
    int i24 = card21.getCost();
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.GameState gameState29 = null;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    java.lang.String str32 = player31.toString();
    org.cs362.dominion.Player[] player_array33 = new org.cs362.dominion.Player[] { player31 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player34 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player34, player_array33);
    gameState28.players = arraylist_player34;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState28.initializeGame();
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    gameState28.cards = arraylist_card41;
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState28.cards;
    gameState28.initializeGame();
    java.lang.String str46 = gameState28.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState28.gameBoard;
    boolean b48 = card21.equals((java.lang.Object)gameState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str32.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str46.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState3.players;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card21, type24);
    gameState3.cards = arraylist_card21;
    org.cs362.dominion.GameState gameState27 = gameState3.clone();
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState3, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    org.cs362.dominion.GameState gameState34 = null;
    org.cs362.dominion.Player player36 = new org.cs362.dominion.Player(gameState34, "hi!");
    java.lang.String str37 = player36.toString();
    org.cs362.dominion.Player[] player_array38 = new org.cs362.dominion.Player[] { player36 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player39 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player39, player_array38);
    gameState33.players = arraylist_player39;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState33.initializeGame();
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    gameState33.cards = arraylist_card46;
    org.cs362.dominion.GameState gameState49 = gameState33.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i50 = gameState33.gameBoard;
    gameState3.gameBoard = hashmap_card_i50;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str37.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i50);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.lang.String str5 = gameState3.toString();
    java.util.List<org.cs362.dominion.Player> list_player6 = gameState3.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player6);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    boolean b17 = gameState3.isGameOver();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i18 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i18);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState3.players;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.Card.Type type24 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card25 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card21, type24);
    gameState3.cards = arraylist_card21;
    org.cs362.dominion.GameState gameState27 = gameState3.clone();
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState27.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + type24 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type24.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    gameState20.cards = list_card40;
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    org.cs362.dominion.GameState gameState47 = null;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState47, "hi!");
    java.lang.String str50 = player49.toString();
    org.cs362.dominion.Player[] player_array51 = new org.cs362.dominion.Player[] { player49 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player52 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player52, player_array51);
    gameState46.players = arraylist_player52;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i55 = gameState46.play();
    org.cs362.dominion.Player player57 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i58 = gameState46.play();
    org.cs362.dominion.Player player60 = new org.cs362.dominion.Player(gameState46, "");
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.createCards();
    gameState46.cards = list_card61;
    org.cs362.dominion.Player player64 = new org.cs362.dominion.Player(gameState46, "hi!");
    gameState20.addPlayer(player64);
    java.util.List<org.cs362.dominion.Player> list_player66 = gameState20.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str50.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player66);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playKingdomCard();
    player13.playTtreasureCard();
    player13.buyCard();
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    gameState23.cards = arraylist_card36;
    gameState3.cards = arraylist_card36;
    org.cs362.dominion.GameState gameState40 = gameState3.clone();
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i43 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i43);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState3, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.lang.String str10 = gameState9.toString();
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card15);
    java.lang.String str18 = gameState17.toString();
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card19, type20);
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type20);
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type20);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    java.lang.String str25 = gameState24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array1 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card2, card_array1);
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card2);
    java.lang.String str5 = gameState4.toString();
    java.util.List<org.cs362.dominion.Card> list_card6 = gameState4.cards;
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card6, type7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card0, type7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.GameState gameState11 = gameState10.clone();
    org.cs362.dominion.Card[] card_array12 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card13 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b14 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card13, card_array12);
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card13);
    org.cs362.dominion.GameState gameState16 = null;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState16, "hi!");
    java.lang.String str19 = player18.toString();
    org.cs362.dominion.Player[] player_array20 = new org.cs362.dominion.Player[] { player18 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player21 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player21, player_array20);
    gameState15.players = arraylist_player21;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState15.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i27 = gameState15.gameBoard;
    gameState11.gameBoard = hashmap_card_i27;
    java.util.List<org.cs362.dominion.Card> list_card29 = null;
    gameState11.cards = list_card29;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i27);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.lang.String str10 = gameState9.toString();
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type12);
    org.cs362.dominion.Card[] card_array14 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card15 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card15, card_array14);
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card15);
    java.lang.String str18 = gameState17.toString();
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState17.cards;
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card19, type20);
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type20);
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type20);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    gameState24.initializeGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type12.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str18.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type20.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.GameState gameState22 = gameState3.clone();
    java.util.List<org.cs362.dominion.Card> list_card23 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    gameState23.cards = arraylist_card36;
    gameState3.cards = arraylist_card36;
    org.cs362.dominion.GameState gameState40 = gameState3.clone();
    java.lang.String str41 = gameState40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str41.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    org.cs362.dominion.Card card36 = null;
    player33.discard(card36);
    player33.playTtreasureCard();
    player33.buyCard();
    player33.printStateGame();
    gameState19.addPlayer(player33);
    player33.buyCard();
    player33.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.GameState gameState22 = gameState3.clone();
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    gameState22.addPlayer(player25);
    // The following exception was thrown during execution in test generation
    try {
    player25.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    gameState3.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player17 = gameState3.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player17);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState10.addPlayer(player24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState10.cards;
    java.lang.String str28 = gameState10.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type33);
    gameState10.cards = list_card34;
    gameState6.cards = list_card34;
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState40.initializeGame();
    org.cs362.dominion.GameState gameState52 = null;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState52, "hi!");
    gameState40.addPlayer(player54);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState40.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i57 = gameState40.getWinners();
    boolean b58 = gameState40.isGameOver();
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card60);
    org.cs362.dominion.GameState gameState63 = null;
    org.cs362.dominion.Player player65 = new org.cs362.dominion.Player(gameState63, "hi!");
    java.lang.String str66 = player65.toString();
    org.cs362.dominion.Player[] player_array67 = new org.cs362.dominion.Player[] { player65 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player68 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player68, player_array67);
    gameState62.players = arraylist_player68;
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState62, "hi!");
    gameState62.initializeGame();
    org.cs362.dominion.GameState gameState74 = null;
    org.cs362.dominion.Player player76 = new org.cs362.dominion.Player(gameState74, "hi!");
    gameState62.addPlayer(player76);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i78 = gameState62.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player79 = gameState62.players;
    gameState40.players = list_player79;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i81 = gameState40.gameBoard;
    gameState6.gameBoard = hashmap_card_i81;
    org.cs362.dominion.GameState gameState83 = gameState6.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type33.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str66.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState83);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    gameState20.initializeGame();
    java.lang.String str22 = gameState20.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str22.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.lang.String str10 = gameState9.toString();
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard(list_card11, cardName12);
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type14);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    gameState20.initializeGame();
    org.cs362.dominion.GameState gameState32 = null;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState32, "hi!");
    gameState20.addPlayer(player34);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState20.cards;
    java.util.List<org.cs362.dominion.Card> list_card37 = gameState20.cards;
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState(list_card37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card40);
    org.cs362.dominion.Card.Type type43 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card44 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type43);
    org.cs362.dominion.Card.Type type45 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type45);
    org.cs362.dominion.Card.Type type47 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card48 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type47);
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card37, type47);
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card16, type47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type43.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type45.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type47.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    gameState3.cards = list_card27;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i29 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Card> list_card30 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array31 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card32, card_array31);
    org.cs362.dominion.GameState gameState34 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card32);
    org.cs362.dominion.Card.Type type35 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card36 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card32, type35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card32, type37);
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card30, type37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState(list_card39);
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    gameState3.addPlayer(player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + type35 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type35.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type37.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState3.players;
    java.lang.String str21 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState3.cards;
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card24, type27);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    java.lang.String str33 = gameState32.toString();
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState32.cards;
    org.cs362.dominion.Card.CardName cardName35 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card36 = org.cs362.dominion.Card.getCard(list_card34, cardName35);
    org.cs362.dominion.Card.Type type37 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card34, type37);
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card24, type37);
    org.cs362.dominion.Card.CardName cardName40 = org.cs362.dominion.Card.CardName.Duchy;
    org.cs362.dominion.Card card41 = org.cs362.dominion.Card.getCard(list_card39, cardName40);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState(list_card39);
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    org.cs362.dominion.Card.Type type47 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card48 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card44, type47);
    org.cs362.dominion.Card[] card_array49 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card50 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card50, card_array49);
    org.cs362.dominion.GameState gameState52 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card50);
    java.lang.String str53 = gameState52.toString();
    java.util.List<org.cs362.dominion.Card> list_card54 = gameState52.cards;
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard(list_card54, cardName55);
    org.cs362.dominion.Card.Type type57 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card58 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card54, type57);
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card44, type57);
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card39, type57);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card22, type57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type27.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card36);
    org.junit.Assert.assertTrue("'" + type37 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type37.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    org.junit.Assert.assertTrue("'" + cardName40 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName40.equals(org.cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + type47 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type47.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str53.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);
    org.junit.Assert.assertTrue("'" + type57 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type57.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i7 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    player21.playTtreasureCard();
    player21.playKingdomCard();
    org.cs362.dominion.Card card24 = null;
    player21.discard(card24);
    player21.playTtreasureCard();
    player21.buyCard();
    player21.printStateGame();
    gameState3.addPlayer(player21);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.lang.String str35 = gameState33.toString();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState3.addPlayer(player37);
    player37.printStateGame();
    player37.printStateGame();
    player37.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState(list_card13);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card16 = org.cs362.dominion.Card.getCard(list_card13, cardName15);
    int i17 = card16.getTreasureValue();
    int i18 = card3.compareTo(card16);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    org.cs362.dominion.Card.Type type23 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card24 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card20, type23);
    org.cs362.dominion.Card.Type type25 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card20, type25);
    boolean b27 = card3.equals((java.lang.Object)arraylist_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + type23 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type23.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card24);
    org.junit.Assert.assertTrue("'" + type25 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type25.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState3.players;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    boolean b19 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.GameState gameState35 = null;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState35, "hi!");
    gameState23.addPlayer(player37);
    java.util.List<org.cs362.dominion.Card> list_card39 = gameState23.cards;
    org.cs362.dominion.GameState gameState40 = gameState23.clone();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.GameState gameState44 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card42);
    org.cs362.dominion.GameState gameState45 = null;
    org.cs362.dominion.Player player47 = new org.cs362.dominion.Player(gameState45, "hi!");
    java.lang.String str48 = player47.toString();
    org.cs362.dominion.Player[] player_array49 = new org.cs362.dominion.Player[] { player47 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player50 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player50, player_array49);
    gameState44.players = arraylist_player50;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState44, "hi!");
    gameState44.initializeGame();
    org.cs362.dominion.Card[] card_array56 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card57 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card57, card_array56);
    gameState44.cards = arraylist_card57;
    org.cs362.dominion.GameState gameState60 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card57);
    org.cs362.dominion.Card[] card_array61 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card62 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card62, card_array61);
    org.cs362.dominion.GameState gameState64 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card62);
    org.cs362.dominion.GameState gameState65 = null;
    org.cs362.dominion.Player player67 = new org.cs362.dominion.Player(gameState65, "hi!");
    java.lang.String str68 = player67.toString();
    org.cs362.dominion.Player[] player_array69 = new org.cs362.dominion.Player[] { player67 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player70 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player70, player_array69);
    gameState64.players = arraylist_player70;
    org.cs362.dominion.Player player74 = new org.cs362.dominion.Player(gameState64, "hi!");
    player74.playTtreasureCard();
    player74.playKingdomCard();
    gameState60.addPlayer(player74);
    org.cs362.dominion.Card[] card_array78 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card79 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b80 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card79, card_array78);
    org.cs362.dominion.GameState gameState81 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card79);
    java.lang.String str82 = gameState81.toString();
    gameState81.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player84 = gameState81.players;
    gameState60.players = list_player84;
    gameState40.players = list_player84;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i87 = gameState40.gameBoard;
    gameState3.gameBoard = hashmap_card_i87;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str48.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str68.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str82.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i87);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState23.play();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState23.play();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState23, "");
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str52 = gameState41.toString();
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState41, "The board game is embty you need to intialize the game!!!!");
    gameState23.addPlayer(player54);
    gameState19.addPlayer(player54);
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState(list_card57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard(list_card57, cardName59);
    player54.discard(card60);
    int i62 = card60.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str52.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 6);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    gameState25.initializeGame();
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    gameState25.addPlayer(player39);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState25.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState25.players;
    gameState3.players = list_player42;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i44 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card46);
    org.cs362.dominion.GameState gameState49 = null;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState49, "hi!");
    java.lang.String str52 = player51.toString();
    org.cs362.dominion.Player[] player_array53 = new org.cs362.dominion.Player[] { player51 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player54 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player54, player_array53);
    gameState48.players = arraylist_player54;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState48, "hi!");
    gameState48.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i60 = gameState48.gameBoard;
    java.lang.String str61 = gameState48.toString();
    boolean b62 = gameState48.isGameOver();
    org.cs362.dominion.GameState gameState63 = gameState48.clone();
    java.util.List<org.cs362.dominion.Card> list_card64 = gameState48.cards;
    gameState3.cards = list_card64;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str52.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    gameState23.cards = arraylist_card36;
    gameState3.cards = arraylist_card36;
    org.cs362.dominion.GameState gameState40 = gameState3.clone();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.GameState gameState44 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card42);
    org.cs362.dominion.Card.Type type45 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card42, type45);
    org.cs362.dominion.Card[] card_array47 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card48 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card48, card_array47);
    org.cs362.dominion.GameState gameState50 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card48);
    java.lang.String str51 = gameState50.toString();
    java.util.List<org.cs362.dominion.Card> list_card52 = gameState50.cards;
    org.cs362.dominion.Card.CardName cardName53 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card54 = org.cs362.dominion.Card.getCard(list_card52, cardName53);
    org.cs362.dominion.Card.Type type55 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card56 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card52, type55);
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card42, type55);
    org.cs362.dominion.Card.CardName cardName58 = org.cs362.dominion.Card.CardName.Duchy;
    org.cs362.dominion.Card card59 = org.cs362.dominion.Card.getCard(list_card57, cardName58);
    gameState3.cards = list_card57;
    java.lang.String str61 = gameState3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + type45 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type45.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str51.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + cardName53 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName53.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + type55 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type55.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName58 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName58.equals(org.cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    org.cs362.dominion.Player[] player_array27 = new org.cs362.dominion.Player[] { player25 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player28 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player28, player_array27);
    gameState22.players = arraylist_player28;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState22.initializeGame();
    org.cs362.dominion.Card[] card_array34 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card35 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card35, card_array34);
    gameState22.cards = arraylist_card35;
    gameState22.initializeGame();
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card40);
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    java.lang.String str46 = player45.toString();
    org.cs362.dominion.Player[] player_array47 = new org.cs362.dominion.Player[] { player45 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player48 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player48, player_array47);
    gameState42.players = arraylist_player48;
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState42, "hi!");
    player52.playTtreasureCard();
    gameState22.addPlayer(player52);
    gameState3.addPlayer(player52);
    player52.printStateGame();
    player52.printStateGame();
    java.lang.String str58 = player52.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str46.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str58.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    boolean b17 = gameState3.isGameOver();
    org.cs362.dominion.GameState gameState18 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    boolean b20 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i7 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    player21.playTtreasureCard();
    player21.playKingdomCard();
    org.cs362.dominion.Card card24 = null;
    player21.discard(card24);
    player21.playTtreasureCard();
    player21.buyCard();
    player21.printStateGame();
    gameState3.addPlayer(player21);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.lang.String str35 = gameState33.toString();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState3.addPlayer(player37);
    boolean b39 = gameState3.isGameOver();
    java.lang.String str40 = gameState3.toString();
    boolean b41 = gameState3.isGameOver();
    org.cs362.dominion.GameState gameState42 = gameState3.clone();
    // The following exception was thrown during execution in test generation
    try {
    gameState42.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str40.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState3, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i22 = null;
    gameState3.gameBoard = hashmap_card_i22;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    java.lang.String str18 = player13.toString();
    java.lang.String str19 = player13.toString();
    player13.printStateGame();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    java.util.List<org.cs362.dominion.Card> list_card41 = gameState24.cards;
    java.lang.String str42 = gameState24.toString();
    org.cs362.dominion.GameState gameState43 = gameState24.clone();
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    java.lang.String str47 = player46.toString();
    gameState43.addPlayer(player46);
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState50 = new org.cs362.dominion.GameState(list_card49);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card52 = org.cs362.dominion.Card.getCard(list_card49, cardName51);
    java.lang.Object obj53 = null;
    boolean b54 = card52.equals(obj53);
    player46.discard(card52);
    org.cs362.dominion.Card.CardName cardName56 = card52.getCardName();
    int i57 = card52.getCost();
    player13.discard(card52);
    int i59 = card52.getTreasureValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str42.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str47.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 3);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i7 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    player21.playTtreasureCard();
    player21.playKingdomCard();
    org.cs362.dominion.Card card24 = null;
    player21.discard(card24);
    player21.playTtreasureCard();
    player21.buyCard();
    player21.printStateGame();
    gameState3.addPlayer(player21);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.lang.String str35 = gameState33.toString();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState3.addPlayer(player37);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card40);
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    java.lang.String str46 = player45.toString();
    org.cs362.dominion.Player[] player_array47 = new org.cs362.dominion.Player[] { player45 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player48 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player48, player_array47);
    gameState42.players = arraylist_player48;
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState42, "hi!");
    gameState42.initializeGame();
    org.cs362.dominion.GameState gameState54 = null;
    org.cs362.dominion.Player player56 = new org.cs362.dominion.Player(gameState54, "hi!");
    gameState42.addPlayer(player56);
    player56.playKingdomCard();
    java.lang.String str59 = player56.toString();
    gameState3.addPlayer(player56);
    // The following exception was thrown during execution in test generation
    try {
    player56.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str35.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str46.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str59.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array1 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card2, card_array1);
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card2);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card2, type5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card2, type7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card0, type7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    org.cs362.dominion.GameState gameState11 = gameState10.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type5.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState11);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    gameState3.cards = list_card27;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card27);
    gameState29.initializeGame();
    org.cs362.dominion.Card[] card_array31 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card32 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b33 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card32, card_array31);
    org.cs362.dominion.GameState gameState34 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card32);
    org.cs362.dominion.GameState gameState35 = null;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState35, "hi!");
    java.lang.String str38 = player37.toString();
    org.cs362.dominion.Player[] player_array39 = new org.cs362.dominion.Player[] { player37 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player40 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player40, player_array39);
    gameState34.players = arraylist_player40;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState34, "hi!");
    gameState34.initializeGame();
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    gameState34.addPlayer(player48);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i50 = gameState34.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i51 = gameState34.getWinners();
    boolean b52 = gameState34.isGameOver();
    org.cs362.dominion.Card[] card_array53 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card54 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card54, card_array53);
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card54);
    org.cs362.dominion.GameState gameState57 = null;
    org.cs362.dominion.Player player59 = new org.cs362.dominion.Player(gameState57, "hi!");
    java.lang.String str60 = player59.toString();
    org.cs362.dominion.Player[] player_array61 = new org.cs362.dominion.Player[] { player59 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player62 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b63 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player62, player_array61);
    gameState56.players = arraylist_player62;
    org.cs362.dominion.Player player66 = new org.cs362.dominion.Player(gameState56, "hi!");
    gameState56.initializeGame();
    org.cs362.dominion.GameState gameState68 = null;
    org.cs362.dominion.Player player70 = new org.cs362.dominion.Player(gameState68, "hi!");
    gameState56.addPlayer(player70);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i72 = gameState56.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player73 = gameState56.players;
    gameState34.players = list_player73;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i75 = gameState34.gameBoard;
    java.util.List<org.cs362.dominion.Card> list_card76 = null;
    gameState34.cards = list_card76;
    java.util.List<org.cs362.dominion.Player> list_player78 = gameState34.players;
    gameState29.players = list_player78;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str38.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str60.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player78);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i7 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i7);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    java.lang.String str18 = player13.toString();
    java.lang.String str19 = player13.toString();
    player13.printStateGame();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    java.util.List<org.cs362.dominion.Card> list_card41 = gameState24.cards;
    java.lang.String str42 = gameState24.toString();
    org.cs362.dominion.GameState gameState43 = gameState24.clone();
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    java.lang.String str47 = player46.toString();
    gameState43.addPlayer(player46);
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState50 = new org.cs362.dominion.GameState(list_card49);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card52 = org.cs362.dominion.Card.getCard(list_card49, cardName51);
    java.lang.Object obj53 = null;
    boolean b54 = card52.equals(obj53);
    player46.discard(card52);
    org.cs362.dominion.Card.CardName cardName56 = card52.getCardName();
    int i57 = card52.getCost();
    player13.discard(card52);
    player13.printStateGame();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str42.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str47.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 6);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    java.lang.Object obj10 = null;
    boolean b11 = card9.equals(obj10);
    int i12 = card9.getTreasureValue();
    org.cs362.dominion.Card.Type type13 = card9.getType();
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 3);
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type13.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState3.getWinners();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState10.addPlayer(player24);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i26 = gameState10.gameBoard;
    gameState3.gameBoard = hashmap_card_i26;
    java.lang.String str28 = gameState3.toString();
    org.cs362.dominion.GameState gameState29 = gameState3.clone();
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState3, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState29);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    player14.playKingdomCard();
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    org.cs362.dominion.Card.CardName cardName18 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card19 = org.cs362.dominion.Card.getCard(list_card16, cardName18);
    java.lang.Object obj20 = null;
    boolean b21 = card19.equals(obj20);
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState(list_card22);
    org.cs362.dominion.Card.CardName cardName24 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card25 = org.cs362.dominion.Card.getCard(list_card22, cardName24);
    int i26 = card19.compareTo(card25);
    player14.discard(card19);
    java.lang.String str28 = card19.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.GameState gameState33 = null;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState33, "hi!");
    java.lang.String str36 = player35.toString();
    org.cs362.dominion.Player[] player_array37 = new org.cs362.dominion.Player[] { player35 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player38 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player38, player_array37);
    gameState32.players = arraylist_player38;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState32, "hi!");
    gameState32.initializeGame();
    org.cs362.dominion.Card[] card_array44 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card45 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card45, card_array44);
    gameState32.cards = arraylist_card45;
    org.cs362.dominion.GameState gameState48 = gameState32.clone();
    org.cs362.dominion.GameState gameState49 = gameState48.clone();
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    org.cs362.dominion.GameState gameState54 = null;
    org.cs362.dominion.Player player56 = new org.cs362.dominion.Player(gameState54, "hi!");
    java.lang.String str57 = player56.toString();
    org.cs362.dominion.Player[] player_array58 = new org.cs362.dominion.Player[] { player56 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player59 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player59, player_array58);
    gameState53.players = arraylist_player59;
    org.cs362.dominion.Player player63 = new org.cs362.dominion.Player(gameState53, "hi!");
    player63.playTtreasureCard();
    player63.playKingdomCard();
    org.cs362.dominion.Card card66 = null;
    player63.discard(card66);
    player63.playTtreasureCard();
    player63.buyCard();
    player63.printStateGame();
    gameState48.addPlayer(player63);
    org.cs362.dominion.Card[] card_array72 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card73 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73, card_array72);
    org.cs362.dominion.GameState gameState75 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card73);
    org.cs362.dominion.GameState gameState76 = null;
    org.cs362.dominion.Player player78 = new org.cs362.dominion.Player(gameState76, "hi!");
    java.lang.String str79 = player78.toString();
    org.cs362.dominion.Player[] player_array80 = new org.cs362.dominion.Player[] { player78 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player81 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b82 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player81, player_array80);
    gameState75.players = arraylist_player81;
    org.cs362.dominion.Player player85 = new org.cs362.dominion.Player(gameState75, "hi!");
    gameState75.initializeGame();
    org.cs362.dominion.Card[] card_array87 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card88 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b89 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card88, card_array87);
    gameState75.cards = arraylist_card88;
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState75.cards;
    gameState75.initializeGame();
    java.lang.String str93 = gameState75.toString();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i94 = gameState75.gameBoard;
    card19.play(player63, gameState75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName18 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName18.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    org.junit.Assert.assertTrue("'" + cardName24 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName24.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " \n\tGold"+ "'", str28.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str36.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str57.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str79.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str93.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i94);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    boolean b17 = gameState3.isGameOver();
    org.cs362.dominion.GameState gameState18 = gameState3.clone();
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState18, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null,  \n\tGold]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState24.play();
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState24.play();
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState24, "");
    java.lang.String str39 = player38.toString();
    gameState18.addPlayer(player38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str39.equals(" ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.buyCard();
    player13.buyCard();
    java.lang.String str17 = player13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState10.addPlayer(player24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState10.cards;
    java.lang.String str28 = gameState10.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type33);
    gameState10.cards = list_card34;
    gameState6.cards = list_card34;
    org.cs362.dominion.GameState gameState37 = new org.cs362.dominion.GameState(list_card34);
    java.lang.String str38 = gameState37.toString();
    java.lang.String str39 = gameState37.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type33.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str38.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str39.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.lang.String str15 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str15.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    int i13 = card3.score();
    org.cs362.dominion.Card.Type type14 = card3.getType();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    player28.playTtreasureCard();
    player28.playKingdomCard();
    org.cs362.dominion.Card card31 = null;
    player28.discard(card31);
    player28.playTtreasureCard();
    player28.buyCard();
    player28.playKingdomCard();
    org.cs362.dominion.Card card36 = null;
    player28.discard(card36);
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    gameState41.initializeGame();
    org.cs362.dominion.GameState gameState53 = null;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState53, "hi!");
    gameState41.addPlayer(player55);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i57 = gameState41.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player58 = gameState41.players;
    java.lang.String str59 = gameState41.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i60 = gameState41.getWinners();
    card3.play(player28, gameState41);
    player28.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str59.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i60);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Player player3 = new org.cs362.dominion.Player(gameState1, " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState3, "");
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card19);
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    java.lang.String str25 = player24.toString();
    org.cs362.dominion.Player[] player_array26 = new org.cs362.dominion.Player[] { player24 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player27 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player27, player_array26);
    gameState21.players = arraylist_player27;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState21, "hi!");
    gameState21.initializeGame();
    org.cs362.dominion.GameState gameState33 = null;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState33, "hi!");
    gameState21.addPlayer(player35);
    player35.playKingdomCard();
    java.lang.String str38 = player35.toString();
    gameState3.addPlayer(player35);
    player35.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str25.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str38.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null,  \n\tGold]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    gameState24.cards = arraylist_card37;
    org.cs362.dominion.GameState gameState40 = gameState24.clone();
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.GameState gameState44 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card42);
    org.cs362.dominion.GameState gameState45 = null;
    org.cs362.dominion.Player player47 = new org.cs362.dominion.Player(gameState45, "hi!");
    java.lang.String str48 = player47.toString();
    org.cs362.dominion.Player[] player_array49 = new org.cs362.dominion.Player[] { player47 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player50 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b51 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player50, player_array49);
    gameState44.players = arraylist_player50;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState44, "hi!");
    player54.playTtreasureCard();
    player54.playKingdomCard();
    org.cs362.dominion.Card card57 = null;
    player54.discard(card57);
    player54.playTtreasureCard();
    player54.buyCard();
    player54.printStateGame();
    gameState40.addPlayer(player54);
    org.cs362.dominion.Card card63 = null;
    player54.discard(card63);
    java.lang.String str65 = player54.toString();
    gameState3.addPlayer(player54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str48.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str65.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null, null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.lang.String str5 = gameState3.toString();
    java.lang.String str6 = gameState3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str5.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.GameState gameState17 = null;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState17, "hi!");
    java.lang.String str20 = player19.toString();
    org.cs362.dominion.Player[] player_array21 = new org.cs362.dominion.Player[] { player19 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player22 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player22, player_array21);
    gameState16.players = arraylist_player22;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState16, "hi!");
    player26.playKingdomCard();
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    org.cs362.dominion.GameState gameState32 = null;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState32, "hi!");
    java.lang.String str35 = player34.toString();
    org.cs362.dominion.Player[] player_array36 = new org.cs362.dominion.Player[] { player34 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player37 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player37, player_array36);
    gameState31.players = arraylist_player37;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState31.initializeGame();
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    gameState31.addPlayer(player45);
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState31.cards;
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState31.cards;
    java.lang.String str49 = gameState31.toString();
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    org.cs362.dominion.Card.Type type54 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card55 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card51, type54);
    gameState31.cards = list_card55;
    org.cs362.dominion.GameState gameState57 = new org.cs362.dominion.GameState(list_card55);
    card3.play(player26, gameState57);
    org.cs362.dominion.Card.CardName cardName59 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str49.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type54.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    java.lang.String str22 = gameState3.toString();
    org.cs362.dominion.GameState gameState23 = gameState3.clone();
    // The following exception was thrown during execution in test generation
    try {
    gameState23.initializeGame();
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str22.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState23);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState3.players;
    java.lang.String str21 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card23 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState(list_card23);
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.GameState gameState29 = null;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    java.lang.String str32 = player31.toString();
    org.cs362.dominion.Player[] player_array33 = new org.cs362.dominion.Player[] { player31 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player34 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player34, player_array33);
    gameState28.players = arraylist_player34;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState28.initializeGame();
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    gameState28.cards = arraylist_card41;
    gameState28.initializeGame();
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card46);
    org.cs362.dominion.GameState gameState49 = null;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState49, "hi!");
    java.lang.String str52 = player51.toString();
    org.cs362.dominion.Player[] player_array53 = new org.cs362.dominion.Player[] { player51 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player54 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player54, player_array53);
    gameState48.players = arraylist_player54;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState48, "hi!");
    player58.playTtreasureCard();
    gameState28.addPlayer(player58);
    gameState24.addPlayer(player58);
    player58.buyCard();
    java.util.List<org.cs362.dominion.Card> list_card63 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState64 = new org.cs362.dominion.GameState(list_card63);
    org.cs362.dominion.Card.CardName cardName65 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card66 = org.cs362.dominion.Card.getCard(list_card63, cardName65);
    java.lang.Object obj67 = null;
    boolean b68 = card66.equals(obj67);
    int i69 = card66.getTreasureValue();
    player58.discard(card66);
    gameState3.addPlayer(player58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str32.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str52.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    org.junit.Assert.assertTrue("'" + cardName65 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName65.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 3);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i5 = gameState3.getWinners();
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    player20.playTtreasureCard();
    player20.playTtreasureCard();
    gameState3.addPlayer(player20);
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.GameState gameState28 = null;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState28, "hi!");
    java.lang.String str31 = player30.toString();
    org.cs362.dominion.Player[] player_array32 = new org.cs362.dominion.Player[] { player30 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player33 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player33, player_array32);
    gameState27.players = arraylist_player33;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState27, "hi!");
    player37.playTtreasureCard();
    player37.playKingdomCard();
    org.cs362.dominion.Card card40 = null;
    player37.discard(card40);
    player37.playTtreasureCard();
    player37.buyCard();
    player37.playKingdomCard();
    player37.playKingdomCard();
    player37.playTtreasureCard();
    gameState3.addPlayer(player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str31.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    org.cs362.dominion.Card.CardName cardName6 = card3.getCardName();
    org.cs362.dominion.Card.CardName cardName7 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));
    org.junit.Assert.assertTrue("'" + cardName7 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName7.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    gameState19.addPlayer(player33);
    java.lang.String str37 = player33.toString();
    org.cs362.dominion.Card card38 = null;
    player33.discard(card38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState(list_card40);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard(list_card40, cardName42);
    java.lang.Object obj44 = null;
    boolean b45 = card43.equals(obj44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState47 = new org.cs362.dominion.GameState(list_card46);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard(list_card46, cardName48);
    int i50 = card43.compareTo(card49);
    java.lang.String str51 = card43.toString();
    java.lang.String str52 = card43.toString();
    org.cs362.dominion.Card.Type type53 = card43.getType();
    player33.discard(card43);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card56);
    org.cs362.dominion.GameState gameState59 = null;
    org.cs362.dominion.Player player61 = new org.cs362.dominion.Player(gameState59, "hi!");
    java.lang.String str62 = player61.toString();
    org.cs362.dominion.Player[] player_array63 = new org.cs362.dominion.Player[] { player61 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player64 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player64, player_array63);
    gameState58.players = arraylist_player64;
    org.cs362.dominion.Player player68 = new org.cs362.dominion.Player(gameState58, "hi!");
    gameState58.initializeGame();
    org.cs362.dominion.GameState gameState70 = null;
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState70, "hi!");
    gameState58.addPlayer(player72);
    java.util.List<org.cs362.dominion.Card> list_card74 = gameState58.cards;
    java.util.List<org.cs362.dominion.Card> list_card75 = gameState58.cards;
    java.lang.String str76 = gameState58.toString();
    org.cs362.dominion.GameState gameState77 = gameState58.clone();
    org.cs362.dominion.GameState gameState78 = null;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState78, "hi!");
    java.lang.String str81 = player80.toString();
    gameState77.addPlayer(player80);
    java.util.List<org.cs362.dominion.Card> list_card83 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState84 = new org.cs362.dominion.GameState(list_card83);
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card86 = org.cs362.dominion.Card.getCard(list_card83, cardName85);
    java.lang.Object obj87 = null;
    boolean b88 = card86.equals(obj87);
    player80.discard(card86);
    org.cs362.dominion.Card.CardName cardName90 = card86.getCardName();
    int i91 = card43.compareTo(card86);
    int i92 = card43.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str37.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + " \n\tGold"+ "'", str51.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " \n\tGold"+ "'", str52.equals(" \n\tGold"));
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type53.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str62.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str76.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str81.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    org.junit.Assert.assertTrue("'" + cardName90 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName90.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 6);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card7 = org.cs362.dominion.Card.getCard(list_card5, cardName6);
    org.cs362.dominion.Card.Type type8 = null;
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type8);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    gameState19.addPlayer(player33);
    java.lang.String str37 = player33.toString();
    org.cs362.dominion.Card card38 = null;
    player33.discard(card38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState(list_card40);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard(list_card40, cardName42);
    java.lang.Object obj44 = null;
    boolean b45 = card43.equals(obj44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState47 = new org.cs362.dominion.GameState(list_card46);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard(list_card46, cardName48);
    int i50 = card43.compareTo(card49);
    java.lang.String str51 = card43.toString();
    java.lang.String str52 = card43.toString();
    org.cs362.dominion.Card.Type type53 = card43.getType();
    player33.discard(card43);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card56);
    org.cs362.dominion.GameState gameState59 = null;
    org.cs362.dominion.Player player61 = new org.cs362.dominion.Player(gameState59, "hi!");
    java.lang.String str62 = player61.toString();
    org.cs362.dominion.Player[] player_array63 = new org.cs362.dominion.Player[] { player61 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player64 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player64, player_array63);
    gameState58.players = arraylist_player64;
    org.cs362.dominion.Player player68 = new org.cs362.dominion.Player(gameState58, "hi!");
    gameState58.initializeGame();
    org.cs362.dominion.GameState gameState70 = null;
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState70, "hi!");
    gameState58.addPlayer(player72);
    java.util.List<org.cs362.dominion.Card> list_card74 = gameState58.cards;
    java.util.List<org.cs362.dominion.Card> list_card75 = gameState58.cards;
    java.lang.String str76 = gameState58.toString();
    org.cs362.dominion.GameState gameState77 = gameState58.clone();
    org.cs362.dominion.GameState gameState78 = null;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState78, "hi!");
    java.lang.String str81 = player80.toString();
    gameState77.addPlayer(player80);
    java.util.List<org.cs362.dominion.Card> list_card83 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState84 = new org.cs362.dominion.GameState(list_card83);
    org.cs362.dominion.Card.CardName cardName85 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card86 = org.cs362.dominion.Card.getCard(list_card83, cardName85);
    java.lang.Object obj87 = null;
    boolean b88 = card86.equals(obj87);
    player80.discard(card86);
    org.cs362.dominion.Card.CardName cardName90 = card86.getCardName();
    int i91 = card43.compareTo(card86);
    int i92 = card43.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str37.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + " \n\tGold"+ "'", str51.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " \n\tGold"+ "'", str52.equals(" \n\tGold"));
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type53.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str62.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str76.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str81.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card83);
    org.junit.Assert.assertTrue("'" + cardName85 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName85.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    org.junit.Assert.assertTrue("'" + cardName90 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName90.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i92 == 0);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    int i4 = card3.getTreasureValue();
    java.lang.String str5 = card3.toString();
    org.cs362.dominion.Card.CardName cardName6 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " \n\tGold"+ "'", str5.equals(" \n\tGold"));
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    org.cs362.dominion.Card[] card_array5 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card6 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card6, card_array5);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card6);
    java.lang.String str9 = gameState8.toString();
    java.lang.String str10 = gameState8.toString();
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState8, "hi!");
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    java.lang.String str17 = gameState16.toString();
    java.util.List<org.cs362.dominion.Card> list_card18 = gameState16.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState16.getWinners();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.GameState gameState35 = null;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState35, "hi!");
    gameState23.addPlayer(player37);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i39 = gameState23.gameBoard;
    gameState16.gameBoard = hashmap_card_i39;
    gameState8.gameBoard = hashmap_card_i39;
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.lang.String str49 = player48.toString();
    org.cs362.dominion.Player[] player_array50 = new org.cs362.dominion.Player[] { player48 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player51 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player51, player_array50);
    gameState45.players = arraylist_player51;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState45.initializeGame();
    org.cs362.dominion.GameState gameState57 = null;
    org.cs362.dominion.Player player59 = new org.cs362.dominion.Player(gameState57, "hi!");
    gameState45.addPlayer(player59);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i61 = gameState45.gameBoard;
    gameState8.gameBoard = hashmap_card_i61;
    gameState3.gameBoard = hashmap_card_i61;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str9.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str17.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str49.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i61);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    java.lang.String str18 = player13.toString();
    java.lang.String str19 = player13.toString();
    player13.printStateGame();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    java.util.List<org.cs362.dominion.Card> list_card41 = gameState24.cards;
    java.lang.String str42 = gameState24.toString();
    org.cs362.dominion.GameState gameState43 = gameState24.clone();
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    java.lang.String str47 = player46.toString();
    gameState43.addPlayer(player46);
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState50 = new org.cs362.dominion.GameState(list_card49);
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card52 = org.cs362.dominion.Card.getCard(list_card49, cardName51);
    java.lang.Object obj53 = null;
    boolean b54 = card52.equals(obj53);
    player46.discard(card52);
    org.cs362.dominion.Card.CardName cardName56 = card52.getCardName();
    int i57 = card52.getCost();
    player13.discard(card52);
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card60);
    org.cs362.dominion.Card.Type type63 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card64 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card60, type63);
    org.cs362.dominion.Card[] card_array65 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card66, card_array65);
    org.cs362.dominion.GameState gameState68 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card66);
    java.lang.String str69 = gameState68.toString();
    java.util.List<org.cs362.dominion.Card> list_card70 = gameState68.cards;
    org.cs362.dominion.Card.CardName cardName71 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card72 = org.cs362.dominion.Card.getCard(list_card70, cardName71);
    org.cs362.dominion.Card.Type type73 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card74 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card70, type73);
    java.util.List<org.cs362.dominion.Card> list_card75 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card60, type73);
    org.cs362.dominion.Card[] card_array76 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card77 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b78 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card77, card_array76);
    org.cs362.dominion.GameState gameState79 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card77);
    org.cs362.dominion.Card.Type type80 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card81 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card77, type80);
    org.cs362.dominion.Card[] card_array82 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card83 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card83, card_array82);
    org.cs362.dominion.GameState gameState85 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card83);
    java.lang.String str86 = gameState85.toString();
    java.util.List<org.cs362.dominion.Card> list_card87 = gameState85.cards;
    org.cs362.dominion.Card.CardName cardName88 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card89 = org.cs362.dominion.Card.getCard(list_card87, cardName88);
    org.cs362.dominion.Card.Type type90 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card91 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card87, type90);
    java.util.List<org.cs362.dominion.Card> list_card92 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card77, type90);
    java.util.List<org.cs362.dominion.Card> list_card93 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card75, type90);
    boolean b94 = card52.equals((java.lang.Object)list_card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str42.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str47.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + type63 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type63.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str69.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    org.junit.Assert.assertTrue("'" + cardName71 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName71.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card72);
    org.junit.Assert.assertTrue("'" + type73 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type73.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    org.junit.Assert.assertTrue("'" + type80 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type80.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str86.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card87);
    org.junit.Assert.assertTrue("'" + cardName88 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName88.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card89);
    org.junit.Assert.assertTrue("'" + type90 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type90.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    player34.playTtreasureCard();
    player34.playKingdomCard();
    org.cs362.dominion.Card card37 = null;
    player34.discard(card37);
    player34.playTtreasureCard();
    player34.buyCard();
    player34.printStateGame();
    gameState19.addPlayer(player34);
    player34.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    gameState23.cards = arraylist_card36;
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card36);
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card41);
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    java.lang.String str47 = player46.toString();
    org.cs362.dominion.Player[] player_array48 = new org.cs362.dominion.Player[] { player46 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player49 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player49, player_array48);
    gameState43.players = arraylist_player49;
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState43, "hi!");
    player53.playTtreasureCard();
    player53.playKingdomCard();
    gameState39.addPlayer(player53);
    java.util.List<org.cs362.dominion.Card> list_card57 = gameState39.cards;
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card59);
    org.cs362.dominion.GameState gameState62 = null;
    org.cs362.dominion.Player player64 = new org.cs362.dominion.Player(gameState62, "hi!");
    java.lang.String str65 = player64.toString();
    org.cs362.dominion.Player[] player_array66 = new org.cs362.dominion.Player[] { player64 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player67 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player67, player_array66);
    gameState61.players = arraylist_player67;
    org.cs362.dominion.Player player71 = new org.cs362.dominion.Player(gameState61, "hi!");
    gameState61.initializeGame();
    org.cs362.dominion.GameState gameState73 = null;
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState73, "hi!");
    gameState61.addPlayer(player75);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i77 = gameState61.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player78 = gameState61.players;
    gameState39.players = list_player78;
    gameState3.players = list_player78;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str47.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str65.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player78);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    boolean b7 = gameState3.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card8 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i16 = gameState3.gameBoard;
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    java.lang.String str21 = gameState20.toString();
    java.util.List<org.cs362.dominion.Card> list_card22 = gameState20.cards;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState20, "");
    gameState3.addPlayer(player24);
    org.cs362.dominion.Card[] card_array26 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card27 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card27, card_array26);
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card27);
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    java.lang.String str33 = player32.toString();
    org.cs362.dominion.Player[] player_array34 = new org.cs362.dominion.Player[] { player32 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player35 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player35, player_array34);
    gameState29.players = arraylist_player35;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i38 = gameState29.play();
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState29, "hi!");
    java.util.List<org.cs362.dominion.Card> list_card41 = gameState29.cards;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState29.players;
    gameState3.players = list_player42;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str33.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState3.play();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    java.lang.String str24 = gameState23.toString();
    java.util.List<org.cs362.dominion.Card> list_card25 = gameState23.cards;
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card25, type26);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState(list_card25);
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    java.lang.String str33 = gameState32.toString();
    java.util.List<org.cs362.dominion.Card> list_card34 = gameState32.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState32.getWinners();
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card37);
    org.cs362.dominion.GameState gameState40 = null;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, "hi!");
    java.lang.String str43 = player42.toString();
    org.cs362.dominion.Player[] player_array44 = new org.cs362.dominion.Player[] { player42 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player45 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player45, player_array44);
    gameState39.players = arraylist_player45;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState39, "hi!");
    gameState39.initializeGame();
    org.cs362.dominion.GameState gameState51 = null;
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState51, "hi!");
    gameState39.addPlayer(player53);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i55 = gameState39.gameBoard;
    gameState32.gameBoard = hashmap_card_i55;
    gameState28.gameBoard = hashmap_card_i55;
    gameState3.gameBoard = hashmap_card_i55;
    org.cs362.dominion.Card[] card_array59 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card60 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card60, card_array59);
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card60);
    java.lang.String str63 = gameState62.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i64 = gameState62.getWinners();
    org.cs362.dominion.GameState gameState65 = gameState62.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i66 = gameState62.gameBoard;
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.GameState gameState70 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card68);
    org.cs362.dominion.GameState gameState71 = null;
    org.cs362.dominion.Player player73 = new org.cs362.dominion.Player(gameState71, "hi!");
    java.lang.String str74 = player73.toString();
    org.cs362.dominion.Player[] player_array75 = new org.cs362.dominion.Player[] { player73 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player76 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player76, player_array75);
    gameState70.players = arraylist_player76;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState70, "hi!");
    player80.playTtreasureCard();
    player80.playKingdomCard();
    org.cs362.dominion.Card card83 = null;
    player80.discard(card83);
    player80.playTtreasureCard();
    player80.buyCard();
    player80.printStateGame();
    gameState62.addPlayer(player80);
    gameState3.addPlayer(player80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str24.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card25);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type26.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str33.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str43.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str63.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str74.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playTtreasureCard();
    player13.buyCard();
    player13.playKingdomCard();
    player13.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playTtreasureCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    java.lang.String str18 = player13.toString();
    java.lang.String str19 = player13.toString();
    player13.playTtreasureCard();
    player13.printStateGame();
    player13.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str18.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array1 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card2 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b3 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card2, card_array1);
    org.cs362.dominion.GameState gameState4 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card2);
    org.cs362.dominion.Card.Type type5 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card2, type5);
    org.cs362.dominion.Card.Type type7 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card2, type7);
    java.util.List<org.cs362.dominion.Card> list_card9 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card0, type7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type5.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type7.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    boolean b17 = gameState3.isGameOver();
    org.cs362.dominion.GameState gameState18 = gameState3.clone();
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState18, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null,  \n\tGold]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    player20.playKingdomCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState18);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type7 = card3.getType();
    java.lang.String str8 = card3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + " \n\tGold"+ "'", str8.equals(" \n\tGold"));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    org.cs362.dominion.Card.Type type13 = card3.getType();
    org.cs362.dominion.Card.Type type14 = card3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type13.equals(org.cs362.dominion.Card.Type.TREASURE));
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState21 = gameState3.clone();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    java.lang.String str26 = gameState25.toString();
    java.lang.String str27 = gameState25.toString();
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState25, "hi!");
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    java.lang.String str34 = gameState33.toString();
    java.util.List<org.cs362.dominion.Card> list_card35 = gameState33.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState33.getWinners();
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState40.initializeGame();
    org.cs362.dominion.GameState gameState52 = null;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState52, "hi!");
    gameState40.addPlayer(player54);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i56 = gameState40.gameBoard;
    gameState33.gameBoard = hashmap_card_i56;
    gameState25.gameBoard = hashmap_card_i56;
    gameState21.gameBoard = hashmap_card_i56;
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    org.cs362.dominion.GameState gameState63 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card61);
    gameState21.cards = arraylist_card61;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str26.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str27.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str34.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState3.play();
    org.cs362.dominion.Card[] card_array10 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card11 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card11, card_array10);
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card11);
    org.cs362.dominion.GameState gameState14 = null;
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState14, "hi!");
    java.lang.String str17 = player16.toString();
    org.cs362.dominion.Player[] player_array18 = new org.cs362.dominion.Player[] { player16 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player19 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player19, player_array18);
    gameState13.players = arraylist_player19;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState13, "hi!");
    gameState13.initializeGame();
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    gameState13.cards = arraylist_card26;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.Card[] card_array30 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card31 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card31, card_array30);
    org.cs362.dominion.GameState gameState33 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card31);
    org.cs362.dominion.GameState gameState34 = null;
    org.cs362.dominion.Player player36 = new org.cs362.dominion.Player(gameState34, "hi!");
    java.lang.String str37 = player36.toString();
    org.cs362.dominion.Player[] player_array38 = new org.cs362.dominion.Player[] { player36 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player39 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player39, player_array38);
    gameState33.players = arraylist_player39;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState33, "hi!");
    player43.playTtreasureCard();
    player43.playKingdomCard();
    gameState29.addPlayer(player43);
    java.lang.String str47 = player43.toString();
    gameState3.addPlayer(player43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str17.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str37.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str47.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    player33.playTtreasureCard();
    player33.playKingdomCard();
    gameState19.addPlayer(player33);
    java.lang.String str37 = player33.toString();
    org.cs362.dominion.Card card38 = null;
    player33.discard(card38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState(list_card40);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard(list_card40, cardName42);
    java.lang.Object obj44 = null;
    boolean b45 = card43.equals(obj44);
    java.util.List<org.cs362.dominion.Card> list_card46 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState47 = new org.cs362.dominion.GameState(list_card46);
    org.cs362.dominion.Card.CardName cardName48 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card49 = org.cs362.dominion.Card.getCard(list_card46, cardName48);
    int i50 = card43.compareTo(card49);
    java.lang.String str51 = card43.toString();
    java.lang.String str52 = card43.toString();
    org.cs362.dominion.Card.Type type53 = card43.getType();
    player33.discard(card43);
    int i55 = card43.score();
    org.cs362.dominion.Card.CardName cardName56 = card43.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str37.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName48 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName48.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + " \n\tGold"+ "'", str51.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " \n\tGold"+ "'", str52.equals(" \n\tGold"));
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type53.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type7 = card3.getType();
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard(list_card8, cardName10);
    java.lang.Object obj12 = null;
    boolean b13 = card11.equals(obj12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard(list_card14, cardName16);
    int i18 = card11.compareTo(card17);
    int i19 = card17.getTreasureValue();
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard(list_card20, cardName22);
    java.lang.Object obj24 = null;
    boolean b25 = card23.equals(obj24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard(list_card26, cardName28);
    int i30 = card23.compareTo(card29);
    int i31 = card17.compareTo(card29);
    int i32 = card3.compareTo(card29);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card34);
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    java.lang.String str40 = player39.toString();
    org.cs362.dominion.Player[] player_array41 = new org.cs362.dominion.Player[] { player39 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player42 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player42, player_array41);
    gameState36.players = arraylist_player42;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState36.initializeGame();
    org.cs362.dominion.GameState gameState48 = null;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState48, "hi!");
    gameState36.addPlayer(player50);
    java.util.List<org.cs362.dominion.Card> list_card52 = gameState36.cards;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState36.cards;
    java.lang.String str54 = gameState36.toString();
    org.cs362.dominion.GameState gameState55 = gameState36.clone();
    org.cs362.dominion.GameState gameState56 = null;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState56, "hi!");
    java.lang.String str59 = player58.toString();
    gameState55.addPlayer(player58);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState(list_card61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard(list_card61, cardName63);
    java.lang.Object obj65 = null;
    boolean b66 = card64.equals(obj65);
    player58.discard(card64);
    org.cs362.dominion.Card.CardName cardName68 = card64.getCardName();
    int i69 = card29.compareTo(card64);
    int i70 = card29.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str40.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str59.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName68.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 0);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card[] card_array2 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card3 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b4 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card3, card_array2);
    org.cs362.dominion.GameState gameState5 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card3);
    org.cs362.dominion.GameState gameState6 = null;
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState6, "hi!");
    java.lang.String str9 = player8.toString();
    org.cs362.dominion.Player[] player_array10 = new org.cs362.dominion.Player[] { player8 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player11 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player11, player_array10);
    gameState5.players = arraylist_player11;
    org.cs362.dominion.Player player15 = new org.cs362.dominion.Player(gameState5, "hi!");
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    gameState5.cards = arraylist_card18;
    gameState5.initializeGame();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    player35.playTtreasureCard();
    gameState5.addPlayer(player35);
    gameState1.addPlayer(player35);
    player35.buyCard();
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState(list_card40);
    org.cs362.dominion.Card.CardName cardName42 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card43 = org.cs362.dominion.Card.getCard(list_card40, cardName42);
    java.lang.Object obj44 = null;
    boolean b45 = card43.equals(obj44);
    int i46 = card43.getTreasureValue();
    player35.discard(card43);
    org.cs362.dominion.Card[] card_array48 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card49 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card49, card_array48);
    org.cs362.dominion.GameState gameState51 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card49);
    org.cs362.dominion.GameState gameState52 = null;
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState52, "hi!");
    java.lang.String str55 = player54.toString();
    org.cs362.dominion.Player[] player_array56 = new org.cs362.dominion.Player[] { player54 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player57 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b58 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player57, player_array56);
    gameState51.players = arraylist_player57;
    org.cs362.dominion.Player player61 = new org.cs362.dominion.Player(gameState51, "hi!");
    player61.playTtreasureCard();
    player61.playKingdomCard();
    org.cs362.dominion.Card card64 = null;
    player61.discard(card64);
    player61.playTtreasureCard();
    player61.buyCard();
    player61.playKingdomCard();
    player61.playKingdomCard();
    player61.buyCard();
    org.cs362.dominion.Card[] card_array71 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card72 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b73 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card72, card_array71);
    org.cs362.dominion.GameState gameState74 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card72);
    org.cs362.dominion.GameState gameState75 = null;
    org.cs362.dominion.Player player77 = new org.cs362.dominion.Player(gameState75, "hi!");
    java.lang.String str78 = player77.toString();
    org.cs362.dominion.Player[] player_array79 = new org.cs362.dominion.Player[] { player77 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player80 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b81 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player80, player_array79);
    gameState74.players = arraylist_player80;
    org.cs362.dominion.Player player84 = new org.cs362.dominion.Player(gameState74, "hi!");
    gameState74.initializeGame();
    org.cs362.dominion.Card[] card_array86 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card87 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b88 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card87, card_array86);
    gameState74.cards = arraylist_card87;
    org.cs362.dominion.GameState gameState90 = gameState74.clone();
    org.cs362.dominion.GameState gameState91 = gameState90.clone();
    card43.play(player61, gameState90);
    org.cs362.dominion.Card.Type type93 = card43.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str9.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    org.junit.Assert.assertTrue("'" + cardName42 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName42.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str55.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str78.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState91);
    org.junit.Assert.assertTrue("'" + type93 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type93.equals(org.cs362.dominion.Card.Type.TREASURE));

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    player17.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    player17.playKingdomCard();
    java.lang.String str20 = player17.toString();
    player17.playTtreasureCard();
    // The following exception was thrown during execution in test generation
    try {
    player17.printStateGame();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    player13.playTtreasureCard();
    player13.playKingdomCard();
    org.cs362.dominion.Card card16 = null;
    player13.discard(card16);
    player13.playTtreasureCard();
    java.lang.String str19 = player13.toString();
    player13.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str19.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.GameState gameState7 = gameState3.clone();
    org.cs362.dominion.Player player8 = null;
    gameState3.addPlayer(player8);
    java.util.List<org.cs362.dominion.Card> list_card10 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card10);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i32 = gameState23.play();
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i35 = gameState23.play();
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState23, "");
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str52 = gameState41.toString();
    org.cs362.dominion.Player player54 = new org.cs362.dominion.Player(gameState41, "The board game is embty you need to intialize the game!!!!");
    gameState23.addPlayer(player54);
    gameState19.addPlayer(player54);
    java.util.List<org.cs362.dominion.Card> list_card57 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState(list_card57);
    org.cs362.dominion.Card.CardName cardName59 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card60 = org.cs362.dominion.Card.getCard(list_card57, cardName59);
    player54.discard(card60);
    player54.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str52.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card57);
    org.junit.Assert.assertTrue("'" + cardName59 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName59.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card60);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    org.cs362.dominion.GameState gameState10 = null;
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState10, "hi!");
    java.lang.String str13 = player12.toString();
    org.cs362.dominion.Player[] player_array14 = new org.cs362.dominion.Player[] { player12 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player15 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player15, player_array14);
    gameState9.players = arraylist_player15;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState9, "hi!");
    player19.playTtreasureCard();
    player19.playKingdomCard();
    org.cs362.dominion.Card card22 = null;
    player19.discard(card22);
    player19.playTtreasureCard();
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.GameState gameState29 = null;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    java.lang.String str32 = player31.toString();
    org.cs362.dominion.Player[] player_array33 = new org.cs362.dominion.Player[] { player31 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player34 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player34, player_array33);
    gameState28.players = arraylist_player34;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState28.initializeGame();
    org.cs362.dominion.GameState gameState40 = null;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState28.addPlayer(player42);
    java.lang.String str44 = gameState28.toString();
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card46);
    org.cs362.dominion.GameState gameState49 = null;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState49, "hi!");
    java.lang.String str52 = player51.toString();
    org.cs362.dominion.Player[] player_array53 = new org.cs362.dominion.Player[] { player51 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player54 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player54, player_array53);
    gameState48.players = arraylist_player54;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState48, "hi!");
    gameState48.initializeGame();
    org.cs362.dominion.GameState gameState60 = null;
    org.cs362.dominion.Player player62 = new org.cs362.dominion.Player(gameState60, "hi!");
    gameState48.addPlayer(player62);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState48.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i65 = gameState48.getWinners();
    boolean b66 = gameState48.isGameOver();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.GameState gameState70 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card68);
    org.cs362.dominion.GameState gameState71 = null;
    org.cs362.dominion.Player player73 = new org.cs362.dominion.Player(gameState71, "hi!");
    java.lang.String str74 = player73.toString();
    org.cs362.dominion.Player[] player_array75 = new org.cs362.dominion.Player[] { player73 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player76 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player76, player_array75);
    gameState70.players = arraylist_player76;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState70, "hi!");
    gameState70.initializeGame();
    org.cs362.dominion.GameState gameState82 = null;
    org.cs362.dominion.Player player84 = new org.cs362.dominion.Player(gameState82, "hi!");
    gameState70.addPlayer(player84);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i86 = gameState70.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player87 = gameState70.players;
    gameState48.players = list_player87;
    gameState28.players = list_player87;
    card3.play(player19, gameState28);
    int i91 = card3.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str13.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str32.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str44.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str52.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str74.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i91 == 6);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.play();
    java.lang.String str16 = gameState3.toString();
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    player18.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    int i11 = card9.getTreasureValue();
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard(list_card12, cardName14);
    java.lang.Object obj16 = null;
    boolean b17 = card15.equals(obj16);
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard(list_card18, cardName20);
    int i22 = card15.compareTo(card21);
    int i23 = card9.compareTo(card21);
    int i24 = card21.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    org.cs362.dominion.Card[] card_array9 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card10 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b11 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card10, card_array9);
    org.cs362.dominion.GameState gameState12 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card10);
    java.lang.String str13 = gameState12.toString();
    java.util.List<org.cs362.dominion.Card> list_card14 = gameState12.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState12.getWinners();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    org.cs362.dominion.GameState gameState20 = null;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState20, "hi!");
    java.lang.String str23 = player22.toString();
    org.cs362.dominion.Player[] player_array24 = new org.cs362.dominion.Player[] { player22 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player25 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player25, player_array24);
    gameState19.players = arraylist_player25;
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState19, "hi!");
    gameState19.initializeGame();
    org.cs362.dominion.GameState gameState31 = null;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState19.addPlayer(player33);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i35 = gameState19.gameBoard;
    gameState12.gameBoard = hashmap_card_i35;
    gameState8.gameBoard = hashmap_card_i35;
    java.util.List<org.cs362.dominion.Card> list_card38 = gameState8.cards;
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card40);
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    java.lang.String str46 = player45.toString();
    org.cs362.dominion.Player[] player_array47 = new org.cs362.dominion.Player[] { player45 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player48 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player48, player_array47);
    gameState42.players = arraylist_player48;
    org.cs362.dominion.Player player52 = new org.cs362.dominion.Player(gameState42, "hi!");
    gameState42.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i54 = gameState42.gameBoard;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i55 = gameState42.gameBoard;
    gameState8.gameBoard = hashmap_card_i55;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str13.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str23.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str46.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i55);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    java.lang.String str20 = gameState19.toString();
    java.util.List<org.cs362.dominion.Player> list_player21 = gameState19.players;
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    gameState19.players = arraylist_player31;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i20 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i21 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i22 = null;
    gameState3.gameBoard = hashmap_card_i22;
    org.cs362.dominion.Card[] card_array24 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card25 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card25, card_array24);
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card25);
    org.cs362.dominion.GameState gameState28 = null;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState28, "hi!");
    java.lang.String str31 = player30.toString();
    org.cs362.dominion.Player[] player_array32 = new org.cs362.dominion.Player[] { player30 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player33 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player33, player_array32);
    gameState27.players = arraylist_player33;
    org.cs362.dominion.Player player37 = new org.cs362.dominion.Player(gameState27, "hi!");
    gameState27.initializeGame();
    org.cs362.dominion.GameState gameState39 = null;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState39, "hi!");
    gameState27.addPlayer(player41);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i43 = gameState27.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player44 = gameState27.players;
    gameState3.players = list_player44;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str46 = gameState3.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str31.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player44);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player6 = gameState3.players;
    org.cs362.dominion.Player player8 = new org.cs362.dominion.Player(gameState3, " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player6);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    org.cs362.dominion.Card[] card_array13 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card14 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card14, card_array13);
    org.cs362.dominion.GameState gameState16 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card14);
    org.cs362.dominion.GameState gameState17 = null;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState17, "hi!");
    java.lang.String str20 = player19.toString();
    org.cs362.dominion.Player[] player_array21 = new org.cs362.dominion.Player[] { player19 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player22 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player22, player_array21);
    gameState16.players = arraylist_player22;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState16, "hi!");
    player26.playKingdomCard();
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    org.cs362.dominion.GameState gameState32 = null;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState32, "hi!");
    java.lang.String str35 = player34.toString();
    org.cs362.dominion.Player[] player_array36 = new org.cs362.dominion.Player[] { player34 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player37 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player37, player_array36);
    gameState31.players = arraylist_player37;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState31.initializeGame();
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    gameState31.addPlayer(player45);
    java.util.List<org.cs362.dominion.Card> list_card47 = gameState31.cards;
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState31.cards;
    java.lang.String str49 = gameState31.toString();
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    org.cs362.dominion.Card.Type type54 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card55 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card51, type54);
    gameState31.cards = list_card55;
    org.cs362.dominion.GameState gameState57 = new org.cs362.dominion.GameState(list_card55);
    card3.play(player26, gameState57);
    org.cs362.dominion.Card card59 = null;
    int i60 = card3.compareTo(card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str20.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str49.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    org.junit.Assert.assertTrue("'" + type54 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type54.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    boolean b21 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.GameState gameState26 = null;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState26, "hi!");
    java.lang.String str29 = player28.toString();
    org.cs362.dominion.Player[] player_array30 = new org.cs362.dominion.Player[] { player28 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player31 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b32 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player31, player_array30);
    gameState25.players = arraylist_player31;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState25, "hi!");
    gameState25.initializeGame();
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    gameState25.addPlayer(player39);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i41 = gameState25.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player42 = gameState25.players;
    gameState3.players = list_player42;
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i44 = gameState3.gameBoard;
    org.cs362.dominion.GameState gameState45 = gameState3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str29.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState45);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    org.cs362.dominion.GameState gameState17 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i18 = gameState3.gameBoard;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i18);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type7 = card3.getType();
    java.util.List<org.cs362.dominion.Card> list_card8 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState(list_card8);
    org.cs362.dominion.Card.CardName cardName10 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card11 = org.cs362.dominion.Card.getCard(list_card8, cardName10);
    java.lang.Object obj12 = null;
    boolean b13 = card11.equals(obj12);
    java.util.List<org.cs362.dominion.Card> list_card14 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState15 = new org.cs362.dominion.GameState(list_card14);
    org.cs362.dominion.Card.CardName cardName16 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card17 = org.cs362.dominion.Card.getCard(list_card14, cardName16);
    int i18 = card11.compareTo(card17);
    int i19 = card17.getTreasureValue();
    java.util.List<org.cs362.dominion.Card> list_card20 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState(list_card20);
    org.cs362.dominion.Card.CardName cardName22 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card23 = org.cs362.dominion.Card.getCard(list_card20, cardName22);
    java.lang.Object obj24 = null;
    boolean b25 = card23.equals(obj24);
    java.util.List<org.cs362.dominion.Card> list_card26 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState27 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Card.CardName cardName28 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card29 = org.cs362.dominion.Card.getCard(list_card26, cardName28);
    int i30 = card23.compareTo(card29);
    int i31 = card17.compareTo(card29);
    int i32 = card3.compareTo(card29);
    org.cs362.dominion.Card[] card_array33 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card34 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card34, card_array33);
    org.cs362.dominion.GameState gameState36 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card34);
    org.cs362.dominion.GameState gameState37 = null;
    org.cs362.dominion.Player player39 = new org.cs362.dominion.Player(gameState37, "hi!");
    java.lang.String str40 = player39.toString();
    org.cs362.dominion.Player[] player_array41 = new org.cs362.dominion.Player[] { player39 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player42 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player42, player_array41);
    gameState36.players = arraylist_player42;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState36.initializeGame();
    org.cs362.dominion.GameState gameState48 = null;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState48, "hi!");
    gameState36.addPlayer(player50);
    java.util.List<org.cs362.dominion.Card> list_card52 = gameState36.cards;
    java.util.List<org.cs362.dominion.Card> list_card53 = gameState36.cards;
    java.lang.String str54 = gameState36.toString();
    org.cs362.dominion.GameState gameState55 = gameState36.clone();
    org.cs362.dominion.GameState gameState56 = null;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState56, "hi!");
    java.lang.String str59 = player58.toString();
    gameState55.addPlayer(player58);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState62 = new org.cs362.dominion.GameState(list_card61);
    org.cs362.dominion.Card.CardName cardName63 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card64 = org.cs362.dominion.Card.getCard(list_card61, cardName63);
    java.lang.Object obj65 = null;
    boolean b66 = card64.equals(obj65);
    player58.discard(card64);
    org.cs362.dominion.Card.CardName cardName68 = card64.getCardName();
    int i69 = card29.compareTo(card64);
    org.cs362.dominion.Card[] card_array70 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card71 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card71, card_array70);
    org.cs362.dominion.GameState gameState73 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card71);
    java.lang.String str74 = gameState73.toString();
    java.util.List<org.cs362.dominion.Card> list_card75 = gameState73.cards;
    org.cs362.dominion.Player player77 = new org.cs362.dominion.Player(gameState73, "");
    player77.buyCard();
    boolean b79 = card64.equals((java.lang.Object)player77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card8);
    org.junit.Assert.assertTrue("'" + cardName10 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName10.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card14);
    org.junit.Assert.assertTrue("'" + cardName16 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName16.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    org.junit.Assert.assertTrue("'" + cardName22 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName22.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + cardName28 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName28.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str40.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str59.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + cardName63 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName63.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    org.junit.Assert.assertTrue("'" + cardName68 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName68.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str74.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.List<org.cs362.dominion.Card> list_card40 = gameState24.cards;
    gameState20.cards = list_card40;
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    java.lang.String str47 = gameState46.toString();
    gameState46.initializeGame();
    java.util.List<org.cs362.dominion.Player> list_player49 = gameState46.players;
    gameState20.players = list_player49;
    org.cs362.dominion.GameState gameState51 = gameState20.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState51);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.GameState gameState22 = gameState3.clone();
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    gameState22.addPlayer(player25);
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card28);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard(list_card28, cardName30);
    java.lang.Object obj32 = null;
    boolean b33 = card31.equals(obj32);
    player25.discard(card31);
    org.cs362.dominion.Card.CardName cardName35 = card31.getCardName();
    org.cs362.dominion.Card.Type type36 = card31.getType();
    java.lang.String str37 = card31.toString();
    org.cs362.dominion.Card[] card_array38 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card39 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b40 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card39, card_array38);
    org.cs362.dominion.GameState gameState41 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card39);
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    org.cs362.dominion.Player[] player_array46 = new org.cs362.dominion.Player[] { player44 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player47 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player47, player_array46);
    gameState41.players = arraylist_player47;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState41, "hi!");
    player51.playTtreasureCard();
    player51.playTtreasureCard();
    org.cs362.dominion.Card[] card_array54 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card55 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card55, card_array54);
    org.cs362.dominion.GameState gameState57 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card55);
    org.cs362.dominion.GameState gameState58 = null;
    org.cs362.dominion.Player player60 = new org.cs362.dominion.Player(gameState58, "hi!");
    java.lang.String str61 = player60.toString();
    org.cs362.dominion.Player[] player_array62 = new org.cs362.dominion.Player[] { player60 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player63 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player63, player_array62);
    gameState57.players = arraylist_player63;
    org.cs362.dominion.Player player67 = new org.cs362.dominion.Player(gameState57, "hi!");
    gameState57.initializeGame();
    org.cs362.dominion.Card[] card_array69 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card70 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b71 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card70, card_array69);
    gameState57.cards = arraylist_card70;
    org.cs362.dominion.GameState gameState73 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card70);
    org.cs362.dominion.Card[] card_array74 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card75 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card75, card_array74);
    org.cs362.dominion.GameState gameState77 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card75);
    org.cs362.dominion.GameState gameState78 = null;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState78, "hi!");
    java.lang.String str81 = player80.toString();
    org.cs362.dominion.Player[] player_array82 = new org.cs362.dominion.Player[] { player80 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player83 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b84 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player83, player_array82);
    gameState77.players = arraylist_player83;
    org.cs362.dominion.Player player87 = new org.cs362.dominion.Player(gameState77, "hi!");
    player87.playTtreasureCard();
    player87.playKingdomCard();
    gameState73.addPlayer(player87);
    java.util.List<org.cs362.dominion.Card> list_card91 = gameState73.cards;
    card31.play(player51, gameState73);
    org.cs362.dominion.Card.CardName cardName93 = card31.getCardName();
    org.cs362.dominion.Card.Type type94 = card31.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type36.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " \n\tGold"+ "'", str37.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str61.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str81.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card91);
    org.junit.Assert.assertTrue("'" + cardName93 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName93.equals(org.cs362.dominion.Card.CardName.Gold));
    org.junit.Assert.assertTrue("'" + type94 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type94.equals(org.cs362.dominion.Card.Type.TREASURE));

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState6 = gameState3.clone();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState10.addPlayer(player24);
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState10.cards;
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState10.cards;
    java.lang.String str28 = gameState10.toString();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.Card.Type type33 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card30, type33);
    gameState10.cards = list_card34;
    gameState6.cards = list_card34;
    boolean b37 = gameState6.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str28.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    org.junit.Assert.assertTrue("'" + type33 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type33.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getCost();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    java.lang.String str11 = gameState10.toString();
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState10, "");
    player14.buyCard();
    org.cs362.dominion.Card[] card_array16 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card17 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card17, card_array16);
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card17);
    org.cs362.dominion.GameState gameState20 = null;
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState20, "hi!");
    java.lang.String str23 = player22.toString();
    org.cs362.dominion.Player[] player_array24 = new org.cs362.dominion.Player[] { player22 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player25 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player25, player_array24);
    gameState19.players = arraylist_player25;
    org.cs362.dominion.Player player29 = new org.cs362.dominion.Player(gameState19, "hi!");
    gameState19.initializeGame();
    org.cs362.dominion.GameState gameState31 = null;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState19.addPlayer(player33);
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card36);
    org.cs362.dominion.GameState gameState39 = null;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState39, "hi!");
    java.lang.String str42 = player41.toString();
    org.cs362.dominion.Player[] player_array43 = new org.cs362.dominion.Player[] { player41 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player44 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player44, player_array43);
    gameState38.players = arraylist_player44;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState38, "hi!");
    gameState38.initializeGame();
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    gameState38.cards = arraylist_card51;
    gameState38.initializeGame();
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card56);
    org.cs362.dominion.GameState gameState59 = null;
    org.cs362.dominion.Player player61 = new org.cs362.dominion.Player(gameState59, "hi!");
    java.lang.String str62 = player61.toString();
    org.cs362.dominion.Player[] player_array63 = new org.cs362.dominion.Player[] { player61 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player64 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player64, player_array63);
    gameState58.players = arraylist_player64;
    org.cs362.dominion.Player player68 = new org.cs362.dominion.Player(gameState58, "hi!");
    player68.playTtreasureCard();
    gameState38.addPlayer(player68);
    gameState19.addPlayer(player68);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i72 = gameState19.getWinners();
    card3.play(player14, gameState19);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i74 = gameState19.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str11.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str23.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str42.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str62.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i74);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    org.cs362.dominion.Card.Type type6 = card3.getType();
    int i7 = card3.score();
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    gameState11.initializeGame();
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState11.addPlayer(player25);
    java.util.List<org.cs362.dominion.Card> list_card27 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState11.cards;
    java.util.List<org.cs362.dominion.Card> list_card29 = gameState11.cards;
    boolean b30 = card3.equals((java.lang.Object)list_card29);
    int i31 = card3.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type6.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 6);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState3.play();
    boolean b20 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    java.lang.String str25 = gameState24.toString();
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type27);
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    java.lang.String str39 = player38.toString();
    org.cs362.dominion.Player[] player_array40 = new org.cs362.dominion.Player[] { player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player41 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player41, player_array40);
    gameState35.players = arraylist_player41;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState35.play();
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState35, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i47 = gameState35.play();
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState35, "");
    gameState29.addPlayer(player49);
    gameState3.addPlayer(player49);
    player49.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str39.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i47);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i19 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player20 = gameState3.players;
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    gameState24.initializeGame();
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    gameState24.addPlayer(player38);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i40 = gameState24.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i41 = gameState24.getWinners();
    org.cs362.dominion.GameState gameState42 = gameState24.clone();
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    java.lang.String str47 = gameState46.toString();
    java.lang.String str48 = gameState46.toString();
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState46, "hi!");
    org.cs362.dominion.Card[] card_array51 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card52 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card52, card_array51);
    org.cs362.dominion.GameState gameState54 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card52);
    java.lang.String str55 = gameState54.toString();
    java.util.List<org.cs362.dominion.Card> list_card56 = gameState54.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i57 = gameState54.getWinners();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card59);
    org.cs362.dominion.GameState gameState62 = null;
    org.cs362.dominion.Player player64 = new org.cs362.dominion.Player(gameState62, "hi!");
    java.lang.String str65 = player64.toString();
    org.cs362.dominion.Player[] player_array66 = new org.cs362.dominion.Player[] { player64 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player67 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player67, player_array66);
    gameState61.players = arraylist_player67;
    org.cs362.dominion.Player player71 = new org.cs362.dominion.Player(gameState61, "hi!");
    gameState61.initializeGame();
    org.cs362.dominion.GameState gameState73 = null;
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState73, "hi!");
    gameState61.addPlayer(player75);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i77 = gameState61.gameBoard;
    gameState54.gameBoard = hashmap_card_i77;
    gameState46.gameBoard = hashmap_card_i77;
    gameState42.gameBoard = hashmap_card_i77;
    gameState3.gameBoard = hashmap_card_i77;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i82 = gameState3.play();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str47.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str48.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str55.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str65.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i82);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    org.cs362.dominion.GameState gameState10 = null;
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState10, "hi!");
    java.lang.String str13 = player12.toString();
    org.cs362.dominion.Player[] player_array14 = new org.cs362.dominion.Player[] { player12 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player15 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player15, player_array14);
    gameState9.players = arraylist_player15;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState9, "hi!");
    player19.playTtreasureCard();
    player19.playKingdomCard();
    org.cs362.dominion.Card card22 = null;
    player19.discard(card22);
    player19.playTtreasureCard();
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.GameState gameState29 = null;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    java.lang.String str32 = player31.toString();
    org.cs362.dominion.Player[] player_array33 = new org.cs362.dominion.Player[] { player31 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player34 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player34, player_array33);
    gameState28.players = arraylist_player34;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState28.initializeGame();
    org.cs362.dominion.GameState gameState40 = null;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState28.addPlayer(player42);
    java.lang.String str44 = gameState28.toString();
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card46);
    org.cs362.dominion.GameState gameState49 = null;
    org.cs362.dominion.Player player51 = new org.cs362.dominion.Player(gameState49, "hi!");
    java.lang.String str52 = player51.toString();
    org.cs362.dominion.Player[] player_array53 = new org.cs362.dominion.Player[] { player51 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player54 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b55 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player54, player_array53);
    gameState48.players = arraylist_player54;
    org.cs362.dominion.Player player58 = new org.cs362.dominion.Player(gameState48, "hi!");
    gameState48.initializeGame();
    org.cs362.dominion.GameState gameState60 = null;
    org.cs362.dominion.Player player62 = new org.cs362.dominion.Player(gameState60, "hi!");
    gameState48.addPlayer(player62);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i64 = gameState48.gameBoard;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i65 = gameState48.getWinners();
    boolean b66 = gameState48.isGameOver();
    org.cs362.dominion.Card[] card_array67 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card68 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b69 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card68, card_array67);
    org.cs362.dominion.GameState gameState70 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card68);
    org.cs362.dominion.GameState gameState71 = null;
    org.cs362.dominion.Player player73 = new org.cs362.dominion.Player(gameState71, "hi!");
    java.lang.String str74 = player73.toString();
    org.cs362.dominion.Player[] player_array75 = new org.cs362.dominion.Player[] { player73 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player76 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b77 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player76, player_array75);
    gameState70.players = arraylist_player76;
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState70, "hi!");
    gameState70.initializeGame();
    org.cs362.dominion.GameState gameState82 = null;
    org.cs362.dominion.Player player84 = new org.cs362.dominion.Player(gameState82, "hi!");
    gameState70.addPlayer(player84);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i86 = gameState70.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player87 = gameState70.players;
    gameState48.players = list_player87;
    gameState28.players = list_player87;
    card3.play(player19, gameState28);
    player19.buyCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str13.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str32.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str44.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str52.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str74.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player87);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card.Type type6 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type6);
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.GameState gameState12 = null;
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState12, "hi!");
    java.lang.String str15 = player14.toString();
    org.cs362.dominion.Player[] player_array16 = new org.cs362.dominion.Player[] { player14 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player17 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b18 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player17, player_array16);
    gameState11.players = arraylist_player17;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState11, "hi!");
    gameState11.initializeGame();
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    gameState11.cards = arraylist_card24;
    org.cs362.dominion.GameState gameState27 = gameState11.clone();
    org.cs362.dominion.GameState gameState28 = gameState27.clone();
    org.cs362.dominion.Card[] card_array29 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card30 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card30, card_array29);
    org.cs362.dominion.GameState gameState32 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card30);
    org.cs362.dominion.GameState gameState33 = null;
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState33, "hi!");
    java.lang.String str36 = player35.toString();
    org.cs362.dominion.Player[] player_array37 = new org.cs362.dominion.Player[] { player35 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player38 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player38, player_array37);
    gameState32.players = arraylist_player38;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState32, "hi!");
    gameState32.initializeGame();
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    gameState32.addPlayer(player46);
    java.util.List<org.cs362.dominion.Card> list_card48 = gameState32.cards;
    gameState28.cards = list_card48;
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    java.lang.String str54 = gameState53.toString();
    java.util.List<org.cs362.dominion.Card> list_card55 = gameState53.cards;
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card57 = org.cs362.dominion.Card.getCard(list_card55, cardName56);
    org.cs362.dominion.Card.Type type58 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card59 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card55, type58);
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card48, type58);
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card7, type58);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card63 = org.cs362.dominion.Card.getCard(list_card7, cardName62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + type6 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type6.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str15.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str36.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str54.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card57);
    org.junit.Assert.assertTrue("'" + type58 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type58.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card63);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    int i4 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type5 = card3.getType();
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    java.lang.Object obj10 = null;
    boolean b11 = card9.equals(obj10);
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard(list_card12, cardName14);
    int i16 = card9.compareTo(card15);
    java.lang.String str17 = card9.toString();
    java.lang.String str18 = card9.toString();
    org.cs362.dominion.Card.Type type19 = card9.getType();
    boolean b20 = card3.equals((java.lang.Object)card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 3);
    org.junit.Assert.assertTrue("'" + type5 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type5.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + " \n\tGold"+ "'", str17.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + " \n\tGold"+ "'", str18.equals(" \n\tGold"));
    org.junit.Assert.assertTrue("'" + type19 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type19.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState3.play();
    boolean b20 = gameState3.isGameOver();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    java.lang.String str25 = gameState24.toString();
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    org.cs362.dominion.Card.Type type27 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card26, type27);
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card26);
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    org.cs362.dominion.GameState gameState36 = null;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState36, "hi!");
    java.lang.String str39 = player38.toString();
    org.cs362.dominion.Player[] player_array40 = new org.cs362.dominion.Player[] { player38 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player41 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player41, player_array40);
    gameState35.players = arraylist_player41;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i44 = gameState35.play();
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState35, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i47 = gameState35.play();
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState35, "");
    gameState29.addPlayer(player49);
    gameState3.addPlayer(player49);
    player49.printStateGame();
    java.lang.String str53 = player49.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    org.junit.Assert.assertTrue("'" + type27 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type27.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str39.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + " ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str53.equals(" ---  ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    int i6 = card3.getTreasureValue();
    org.cs362.dominion.Card.Type type7 = card3.getType();
    org.cs362.dominion.Card.Type type8 = card3.getType();
    org.cs362.dominion.Card.CardName cardName9 = card3.getCardName();
    org.cs362.dominion.Card.Type type10 = card3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 3);
    org.junit.Assert.assertTrue("'" + type7 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type7.equals(org.cs362.dominion.Card.Type.TREASURE));
    org.junit.Assert.assertTrue("'" + type8 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type8.equals(org.cs362.dominion.Card.Type.TREASURE));
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Gold));
    org.junit.Assert.assertTrue("'" + type10 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type10.equals(org.cs362.dominion.Card.Type.TREASURE));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Card> list_card16 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState24, "hi!");
    player34.playTtreasureCard();
    player34.playKingdomCard();
    org.cs362.dominion.Card card37 = null;
    player34.discard(card37);
    player34.playTtreasureCard();
    player34.buyCard();
    player34.printStateGame();
    gameState19.addPlayer(player34);
    org.cs362.dominion.Card[] card_array43 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card44 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b45 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card44, card_array43);
    org.cs362.dominion.GameState gameState46 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card44);
    org.cs362.dominion.GameState gameState47 = null;
    org.cs362.dominion.Player player49 = new org.cs362.dominion.Player(gameState47, "hi!");
    java.lang.String str50 = player49.toString();
    org.cs362.dominion.Player[] player_array51 = new org.cs362.dominion.Player[] { player49 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player52 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b53 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player52, player_array51);
    gameState46.players = arraylist_player52;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i55 = gameState46.play();
    org.cs362.dominion.Player player57 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i58 = gameState46.play();
    org.cs362.dominion.Player player60 = new org.cs362.dominion.Player(gameState46, "");
    java.util.List<org.cs362.dominion.Card> list_card61 = org.cs362.dominion.Card.createCards();
    gameState46.cards = list_card61;
    gameState19.cards = list_card61;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str50.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card61);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    org.cs362.dominion.GameState gameState18 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    org.cs362.dominion.GameState gameState19 = null;
    org.cs362.dominion.Player player21 = new org.cs362.dominion.Player(gameState19, "hi!");
    java.lang.String str22 = player21.toString();
    org.cs362.dominion.Player[] player_array23 = new org.cs362.dominion.Player[] { player21 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player24 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player24, player_array23);
    gameState18.players = arraylist_player24;
    org.cs362.dominion.Player player28 = new org.cs362.dominion.Player(gameState18, "hi!");
    gameState18.initializeGame();
    org.cs362.dominion.GameState gameState30 = null;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState18.addPlayer(player32);
    player32.playKingdomCard();
    gameState3.addPlayer(player32);
    java.util.List<org.cs362.dominion.Card> list_card36 = gameState3.cards;
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState40.initializeGame();
    org.cs362.dominion.Card[] card_array52 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card53 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b54 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card53, card_array52);
    gameState40.cards = arraylist_card53;
    org.cs362.dominion.GameState gameState56 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card53);
    java.lang.String str57 = gameState56.toString();
    org.cs362.dominion.Card[] card_array58 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card59 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card59, card_array58);
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card59);
    java.lang.String str62 = gameState61.toString();
    java.util.List<org.cs362.dominion.Card> list_card63 = gameState61.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i64 = gameState61.getWinners();
    org.cs362.dominion.Card[] card_array65 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card66 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b67 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card66, card_array65);
    org.cs362.dominion.GameState gameState68 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card66);
    org.cs362.dominion.GameState gameState69 = null;
    org.cs362.dominion.Player player71 = new org.cs362.dominion.Player(gameState69, "hi!");
    java.lang.String str72 = player71.toString();
    org.cs362.dominion.Player[] player_array73 = new org.cs362.dominion.Player[] { player71 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player74 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b75 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player74, player_array73);
    gameState68.players = arraylist_player74;
    org.cs362.dominion.Player player78 = new org.cs362.dominion.Player(gameState68, "hi!");
    gameState68.initializeGame();
    org.cs362.dominion.GameState gameState80 = null;
    org.cs362.dominion.Player player82 = new org.cs362.dominion.Player(gameState80, "hi!");
    gameState68.addPlayer(player82);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i84 = gameState68.gameBoard;
    gameState61.gameBoard = hashmap_card_i84;
    gameState56.gameBoard = hashmap_card_i84;
    gameState3.gameBoard = hashmap_card_i84;
    java.util.List<org.cs362.dominion.Card> list_card88 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str22.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str57.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str62.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str72.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card88);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.lang.String str19 = gameState3.toString();
    org.cs362.dominion.Card[] card_array20 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card21 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card21, card_array20);
    org.cs362.dominion.GameState gameState23 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card21);
    org.cs362.dominion.GameState gameState24 = null;
    org.cs362.dominion.Player player26 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.lang.String str27 = player26.toString();
    org.cs362.dominion.Player[] player_array28 = new org.cs362.dominion.Player[] { player26 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player29 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player29, player_array28);
    gameState23.players = arraylist_player29;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState23, "hi!");
    gameState23.initializeGame();
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    gameState23.cards = arraylist_card36;
    gameState3.cards = arraylist_card36;
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card41);
    org.cs362.dominion.Card.Type type44 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card45 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card41, type44);
    org.cs362.dominion.Card.Type type46 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card41, type46);
    org.cs362.dominion.Card.Type type48 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card49 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card41, type48);
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card36, type48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str19.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str27.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + type44 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type44.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    org.junit.Assert.assertTrue("'" + type46 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type46.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + type48 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type48.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    org.cs362.dominion.GameState gameState0 = null;
    org.cs362.dominion.Player player2 = new org.cs362.dominion.Player(gameState0, "hi!");
    java.lang.String str3 = player2.toString();
    player2.playKingdomCard();
    java.lang.String str5 = player2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str3.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str5.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState3.players;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState3, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    java.util.List<org.cs362.dominion.Player> list_player19 = gameState3.players;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player19);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.GameState gameState22 = gameState3.clone();
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    gameState22.addPlayer(player25);
    java.util.List<org.cs362.dominion.Card> list_card28 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card28);
    org.cs362.dominion.Card.CardName cardName30 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card31 = org.cs362.dominion.Card.getCard(list_card28, cardName30);
    java.lang.Object obj32 = null;
    boolean b33 = card31.equals(obj32);
    player25.discard(card31);
    org.cs362.dominion.Card.CardName cardName35 = card31.getCardName();
    int i36 = card31.getCost();
    java.lang.String str37 = card31.toString();
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState(list_card38);
    org.cs362.dominion.Card[] card_array40 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card41 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b42 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card41, card_array40);
    org.cs362.dominion.GameState gameState43 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card41);
    org.cs362.dominion.GameState gameState44 = null;
    org.cs362.dominion.Player player46 = new org.cs362.dominion.Player(gameState44, "hi!");
    java.lang.String str47 = player46.toString();
    org.cs362.dominion.Player[] player_array48 = new org.cs362.dominion.Player[] { player46 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player49 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b50 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player49, player_array48);
    gameState43.players = arraylist_player49;
    org.cs362.dominion.Player player53 = new org.cs362.dominion.Player(gameState43, "hi!");
    gameState43.initializeGame();
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    gameState43.cards = arraylist_card56;
    gameState43.initializeGame();
    org.cs362.dominion.Card[] card_array60 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card61 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b62 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card61, card_array60);
    org.cs362.dominion.GameState gameState63 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card61);
    org.cs362.dominion.GameState gameState64 = null;
    org.cs362.dominion.Player player66 = new org.cs362.dominion.Player(gameState64, "hi!");
    java.lang.String str67 = player66.toString();
    org.cs362.dominion.Player[] player_array68 = new org.cs362.dominion.Player[] { player66 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player69 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b70 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player69, player_array68);
    gameState63.players = arraylist_player69;
    org.cs362.dominion.Player player73 = new org.cs362.dominion.Player(gameState63, "hi!");
    player73.playTtreasureCard();
    gameState43.addPlayer(player73);
    gameState39.addPlayer(player73);
    org.cs362.dominion.Card[] card_array77 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card78 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b79 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card78, card_array77);
    org.cs362.dominion.GameState gameState80 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card78);
    java.lang.String str81 = gameState80.toString();
    gameState80.initializeGame();
    org.cs362.dominion.GameState gameState83 = gameState80.clone();
    org.cs362.dominion.GameState gameState84 = gameState80.clone();
    card31.play(player73, gameState84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName30 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName30.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + cardName35 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName35.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + " \n\tGold"+ "'", str37.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str47.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str67.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str81.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState84);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    java.util.List<org.cs362.dominion.Card> list_card20 = gameState3.cards;
    java.lang.String str21 = gameState3.toString();
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    gameState3.cards = list_card27;
    org.cs362.dominion.GameState gameState29 = new org.cs362.dominion.GameState(list_card27);
    gameState29.initializeGame();
    java.util.List<org.cs362.dominion.Card> list_card31 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    org.cs362.dominion.GameState gameState35 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card33);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type36);
    org.cs362.dominion.Card.Type type38 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card39 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card33, type38);
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card31, type38);
    gameState29.cards = list_card40;
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    org.cs362.dominion.GameState gameState45 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card43);
    org.cs362.dominion.GameState gameState46 = null;
    org.cs362.dominion.Player player48 = new org.cs362.dominion.Player(gameState46, "hi!");
    java.lang.String str49 = player48.toString();
    org.cs362.dominion.Player[] player_array50 = new org.cs362.dominion.Player[] { player48 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player51 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player51, player_array50);
    gameState45.players = arraylist_player51;
    org.cs362.dominion.Player player55 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState45.initializeGame();
    org.cs362.dominion.GameState gameState57 = null;
    org.cs362.dominion.Player player59 = new org.cs362.dominion.Player(gameState57, "hi!");
    gameState45.addPlayer(player59);
    java.lang.String str61 = gameState45.toString();
    org.cs362.dominion.Card[] card_array62 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card63 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b64 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card63, card_array62);
    org.cs362.dominion.GameState gameState65 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card63);
    org.cs362.dominion.GameState gameState66 = null;
    org.cs362.dominion.Player player68 = new org.cs362.dominion.Player(gameState66, "hi!");
    java.lang.String str69 = player68.toString();
    org.cs362.dominion.Player[] player_array70 = new org.cs362.dominion.Player[] { player68 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player71 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b72 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player71, player_array70);
    gameState65.players = arraylist_player71;
    org.cs362.dominion.Player player75 = new org.cs362.dominion.Player(gameState65, "hi!");
    gameState65.initializeGame();
    org.cs362.dominion.Card[] card_array77 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card78 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b79 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card78, card_array77);
    gameState65.cards = arraylist_card78;
    gameState45.cards = arraylist_card78;
    org.cs362.dominion.GameState gameState82 = gameState45.clone();
    org.cs362.dominion.Player player84 = new org.cs362.dominion.Player(gameState45, "hi!");
    gameState29.addPlayer(player84);
    java.util.List<org.cs362.dominion.Card> list_card86 = gameState29.cards;
    boolean b87 = gameState29.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str21.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type36.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    org.junit.Assert.assertTrue("'" + type38 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type38.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str49.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str61.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str69.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.lang.String str10 = gameState9.toString();
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard(list_card11, cardName12);
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type14);
    org.cs362.dominion.Card.CardName cardName17 = org.cs362.dominion.Card.CardName.Duchy;
    org.cs362.dominion.Card card18 = org.cs362.dominion.Card.getCard(list_card16, cardName17);
    org.cs362.dominion.Card.CardName cardName19 = org.cs362.dominion.Card.CardName.Silver;
    org.cs362.dominion.Card card20 = org.cs362.dominion.Card.getCard(list_card16, cardName19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + cardName17 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName17.equals(org.cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card18);
    org.junit.Assert.assertTrue("'" + cardName19 + "' != '" + org.cs362.dominion.Card.CardName.Silver + "'", cardName19.equals(org.cs362.dominion.Card.CardName.Silver));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card20);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = null;
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Player player3 = new org.cs362.dominion.Player(gameState1, " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState(list_card13);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card16 = org.cs362.dominion.Card.getCard(list_card13, cardName15);
    int i17 = card16.getTreasureValue();
    int i18 = card3.compareTo(card16);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    org.cs362.dominion.Player[] player_array27 = new org.cs362.dominion.Player[] { player25 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player28 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player28, player_array27);
    gameState22.players = arraylist_player28;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState22.initializeGame();
    org.cs362.dominion.GameState gameState34 = null;
    org.cs362.dominion.Player player36 = new org.cs362.dominion.Player(gameState34, "hi!");
    gameState22.addPlayer(player36);
    java.util.List<org.cs362.dominion.Card> list_card38 = gameState22.cards;
    java.util.List<org.cs362.dominion.Card> list_card39 = gameState22.cards;
    java.lang.String str40 = gameState22.toString();
    org.cs362.dominion.GameState gameState41 = gameState22.clone();
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    gameState41.addPlayer(player44);
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card50 = org.cs362.dominion.Card.getCard(list_card47, cardName49);
    java.lang.Object obj51 = null;
    boolean b52 = card50.equals(obj51);
    player44.discard(card50);
    int i54 = card16.compareTo(card50);
    org.cs362.dominion.Card[] card_array55 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card56 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b57 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card56, card_array55);
    org.cs362.dominion.GameState gameState58 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card56);
    java.lang.String str59 = gameState58.toString();
    java.util.List<org.cs362.dominion.Card> list_card60 = gameState58.cards;
    org.cs362.dominion.Card.Type type61 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card60, type61);
    org.cs362.dominion.GameState gameState63 = new org.cs362.dominion.GameState(list_card60);
    org.cs362.dominion.Player player65 = new org.cs362.dominion.Player(gameState63, "hi!");
    org.cs362.dominion.Card[] card_array66 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card67 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b68 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card67, card_array66);
    org.cs362.dominion.GameState gameState69 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card67);
    org.cs362.dominion.GameState gameState70 = null;
    org.cs362.dominion.Player player72 = new org.cs362.dominion.Player(gameState70, "hi!");
    java.lang.String str73 = player72.toString();
    org.cs362.dominion.Player[] player_array74 = new org.cs362.dominion.Player[] { player72 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player75 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b76 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player75, player_array74);
    gameState69.players = arraylist_player75;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i78 = gameState69.play();
    org.cs362.dominion.Player player80 = new org.cs362.dominion.Player(gameState69, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i81 = gameState69.play();
    org.cs362.dominion.Player player83 = new org.cs362.dominion.Player(gameState69, "");
    gameState63.addPlayer(player83);
    boolean b85 = card16.equals((java.lang.Object)player83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str40.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str59.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type61.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str73.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    org.cs362.dominion.GameState gameState10 = null;
    org.cs362.dominion.Player player12 = new org.cs362.dominion.Player(gameState10, "hi!");
    java.lang.String str13 = player12.toString();
    org.cs362.dominion.Player[] player_array14 = new org.cs362.dominion.Player[] { player12 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player15 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player15, player_array14);
    gameState9.players = arraylist_player15;
    org.cs362.dominion.Player player19 = new org.cs362.dominion.Player(gameState9, "hi!");
    java.lang.String str20 = gameState9.toString();
    org.cs362.dominion.Player player22 = new org.cs362.dominion.Player(gameState9, "The board game is embty you need to intialize the game!!!!");
    org.cs362.dominion.Card card23 = null;
    player22.discard(card23);
    java.lang.String str25 = player22.toString();
    player22.printStateGame();
    org.cs362.dominion.Card[] card_array27 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card28 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card28, card_array27);
    org.cs362.dominion.GameState gameState30 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card28);
    org.cs362.dominion.GameState gameState31 = null;
    org.cs362.dominion.Player player33 = new org.cs362.dominion.Player(gameState31, "hi!");
    java.lang.String str34 = player33.toString();
    org.cs362.dominion.Player[] player_array35 = new org.cs362.dominion.Player[] { player33 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player36 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player36, player_array35);
    gameState30.players = arraylist_player36;
    org.cs362.dominion.Player player40 = new org.cs362.dominion.Player(gameState30, "hi!");
    gameState30.initializeGame();
    org.cs362.dominion.Card[] card_array42 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card43 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card43, card_array42);
    gameState30.cards = arraylist_card43;
    gameState30.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState30.gameBoard;
    org.cs362.dominion.GameState gameState48 = gameState30.clone();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i49 = gameState48.getWinners();
    card3.play(player22, gameState48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str13.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str25.equals(" --- The board game is embty you need to intialize the game!!!! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str34.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i49);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i8 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i9 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i10 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i10);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    boolean b6 = gameState3.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card7 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.Card[] card_array8 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card9 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card9, card_array8);
    org.cs362.dominion.GameState gameState11 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card9);
    org.cs362.dominion.Card.Type type12 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card9, type12);
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card9, type14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card7, type14);
    gameState3.cards = list_card16;
    org.cs362.dominion.Card[] card_array18 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card19 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card19, card_array18);
    org.cs362.dominion.GameState gameState21 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card19);
    org.cs362.dominion.GameState gameState22 = null;
    org.cs362.dominion.Player player24 = new org.cs362.dominion.Player(gameState22, "hi!");
    java.lang.String str25 = player24.toString();
    org.cs362.dominion.Player[] player_array26 = new org.cs362.dominion.Player[] { player24 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player27 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player27, player_array26);
    gameState21.players = arraylist_player27;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState21, "hi!");
    player31.playTtreasureCard();
    player31.buyCard();
    org.cs362.dominion.Card card34 = null;
    player31.discard(card34);
    player31.printStateGame();
    gameState3.addPlayer(player31);
    player31.printStateGame();
    player31.playTtreasureCard();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + type12 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type12.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type14.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str25.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    org.cs362.dominion.Card.Type type13 = card3.getType();
    org.cs362.dominion.Card.CardName cardName14 = card3.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    org.junit.Assert.assertTrue("'" + type13 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type13.equals(org.cs362.dominion.Card.Type.TREASURE));
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    int i11 = card9.getTreasureValue();
    java.util.List<org.cs362.dominion.Card> list_card12 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState13 = new org.cs362.dominion.GameState(list_card12);
    org.cs362.dominion.Card.CardName cardName14 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card15 = org.cs362.dominion.Card.getCard(list_card12, cardName14);
    java.lang.Object obj16 = null;
    boolean b17 = card15.equals(obj16);
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card18);
    org.cs362.dominion.Card.CardName cardName20 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card21 = org.cs362.dominion.Card.getCard(list_card18, cardName20);
    int i22 = card15.compareTo(card21);
    int i23 = card9.compareTo(card21);
    int i24 = card21.getCost();
    org.cs362.dominion.Card[] card_array25 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card26 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card26, card_array25);
    org.cs362.dominion.GameState gameState28 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card26);
    org.cs362.dominion.GameState gameState29 = null;
    org.cs362.dominion.Player player31 = new org.cs362.dominion.Player(gameState29, "hi!");
    java.lang.String str32 = player31.toString();
    org.cs362.dominion.Player[] player_array33 = new org.cs362.dominion.Player[] { player31 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player34 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b35 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player34, player_array33);
    gameState28.players = arraylist_player34;
    org.cs362.dominion.Player player38 = new org.cs362.dominion.Player(gameState28, "hi!");
    gameState28.initializeGame();
    org.cs362.dominion.GameState gameState40 = null;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, "hi!");
    gameState28.addPlayer(player42);
    java.util.List<org.cs362.dominion.Card> list_card44 = gameState28.cards;
    java.util.List<org.cs362.dominion.Card> list_card45 = gameState28.cards;
    java.lang.String str46 = gameState28.toString();
    org.cs362.dominion.GameState gameState47 = gameState28.clone();
    org.cs362.dominion.GameState gameState48 = null;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState48, "hi!");
    java.lang.String str51 = player50.toString();
    gameState47.addPlayer(player50);
    java.util.List<org.cs362.dominion.Card> list_card53 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState54 = new org.cs362.dominion.GameState(list_card53);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard(list_card53, cardName55);
    java.lang.Object obj57 = null;
    boolean b58 = card56.equals(obj57);
    player50.discard(card56);
    org.cs362.dominion.Card.CardName cardName60 = card56.getCardName();
    int i61 = card21.compareTo(card56);
    int i62 = card21.getTreasureValue();
    int i63 = card21.getTreasureValue();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName14 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName14.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    org.junit.Assert.assertTrue("'" + cardName20 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName20.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str32.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str46.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str51.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card53);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 3);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.lang.String str14 = gameState3.toString();
    org.cs362.dominion.Player player16 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    org.cs362.dominion.GameState gameState17 = gameState3.clone();
    boolean b18 = gameState3.isGameOver();
    java.util.List<org.cs362.dominion.Card> list_card19 = gameState3.cards;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str14.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    java.lang.String str11 = card3.toString();
    java.lang.String str12 = card3.toString();
    java.util.List<org.cs362.dominion.Card> list_card13 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState(list_card13);
    org.cs362.dominion.Card.CardName cardName15 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card16 = org.cs362.dominion.Card.getCard(list_card13, cardName15);
    int i17 = card16.getTreasureValue();
    int i18 = card3.compareTo(card16);
    org.cs362.dominion.Card[] card_array19 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card20 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card20, card_array19);
    org.cs362.dominion.GameState gameState22 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card20);
    org.cs362.dominion.GameState gameState23 = null;
    org.cs362.dominion.Player player25 = new org.cs362.dominion.Player(gameState23, "hi!");
    java.lang.String str26 = player25.toString();
    org.cs362.dominion.Player[] player_array27 = new org.cs362.dominion.Player[] { player25 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player28 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b29 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player28, player_array27);
    gameState22.players = arraylist_player28;
    org.cs362.dominion.Player player32 = new org.cs362.dominion.Player(gameState22, "hi!");
    gameState22.initializeGame();
    org.cs362.dominion.GameState gameState34 = null;
    org.cs362.dominion.Player player36 = new org.cs362.dominion.Player(gameState34, "hi!");
    gameState22.addPlayer(player36);
    java.util.List<org.cs362.dominion.Card> list_card38 = gameState22.cards;
    java.util.List<org.cs362.dominion.Card> list_card39 = gameState22.cards;
    java.lang.String str40 = gameState22.toString();
    org.cs362.dominion.GameState gameState41 = gameState22.clone();
    org.cs362.dominion.GameState gameState42 = null;
    org.cs362.dominion.Player player44 = new org.cs362.dominion.Player(gameState42, "hi!");
    java.lang.String str45 = player44.toString();
    gameState41.addPlayer(player44);
    java.util.List<org.cs362.dominion.Card> list_card47 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState(list_card47);
    org.cs362.dominion.Card.CardName cardName49 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card50 = org.cs362.dominion.Card.getCard(list_card47, cardName49);
    java.lang.Object obj51 = null;
    boolean b52 = card50.equals(obj51);
    player44.discard(card50);
    int i54 = card16.compareTo(card50);
    int i55 = card50.score();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + " \n\tGold"+ "'", str11.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + " \n\tGold"+ "'", str12.equals(" \n\tGold"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card13);
    org.junit.Assert.assertTrue("'" + cardName15 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName15.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str26.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str40.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str45.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card47);
    org.junit.Assert.assertTrue("'" + cardName49 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName49.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.getWinners();
    org.cs362.dominion.GameState gameState16 = gameState3.clone();
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState3, " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null,  \n\tGold]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState16);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    java.lang.String str6 = gameState3.toString();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    java.lang.String str11 = gameState10.toString();
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard(list_card12, cardName13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card12, type15);
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    gameState3.cards = list_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str11.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type15.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i12 = gameState3.play();
    org.cs362.dominion.Player player14 = new org.cs362.dominion.Player(gameState3, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i15 = gameState3.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState3.players;
    org.cs362.dominion.Player player18 = new org.cs362.dominion.Player(gameState3, "The board game is embty you need to intialize the game!!!!");
    boolean b19 = gameState3.isGameOver();
    boolean b20 = gameState3.isGameOver();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    java.lang.String str6 = gameState3.toString();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    java.lang.String str11 = gameState10.toString();
    java.util.List<org.cs362.dominion.Card> list_card12 = gameState10.cards;
    org.cs362.dominion.Card.CardName cardName13 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card14 = org.cs362.dominion.Card.getCard(list_card12, cardName13);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card12, type15);
    org.cs362.dominion.GameState gameState17 = new org.cs362.dominion.GameState(list_card16);
    gameState3.cards = list_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str6.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str11.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card12);
    org.junit.Assert.assertTrue("'" + cardName13 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName13.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card14);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type15.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Card.CardName cardName6 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card7 = org.cs362.dominion.Card.getCard(list_card5, cardName6);
    org.cs362.dominion.GameState gameState8 = new org.cs362.dominion.GameState(list_card5);
    org.cs362.dominion.Card.CardName cardName9 = org.cs362.dominion.Card.CardName.Smithy;
    org.cs362.dominion.Card card10 = org.cs362.dominion.Card.getCard(list_card5, cardName9);
    org.cs362.dominion.Card[] card_array11 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card12 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b13 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card12, card_array11);
    org.cs362.dominion.GameState gameState14 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card12);
    org.cs362.dominion.Card.Type type15 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card12, type15);
    org.cs362.dominion.Card.Type type17 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card18 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card12, type17);
    java.util.List<org.cs362.dominion.Card> list_card19 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card5, type17);
    org.cs362.dominion.Card.Type type20 = org.cs362.dominion.Card.Type.ACTION;
    java.util.List<org.cs362.dominion.Card> list_card21 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card19, type20);
    org.cs362.dominion.Card[] card_array22 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card23 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b24 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card23, card_array22);
    org.cs362.dominion.GameState gameState25 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card23);
    org.cs362.dominion.Card.Type type26 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card27 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type26);
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    java.lang.String str32 = gameState31.toString();
    java.util.List<org.cs362.dominion.Card> list_card33 = gameState31.cards;
    org.cs362.dominion.Card.CardName cardName34 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card35 = org.cs362.dominion.Card.getCard(list_card33, cardName34);
    org.cs362.dominion.Card.Type type36 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card37 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card33, type36);
    java.util.List<org.cs362.dominion.Card> list_card38 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card23, type36);
    org.cs362.dominion.Card[] card_array39 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card40 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card40, card_array39);
    org.cs362.dominion.GameState gameState42 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card40);
    org.cs362.dominion.Card.Type type43 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card44 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type43);
    org.cs362.dominion.Card[] card_array45 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card46 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card46, card_array45);
    org.cs362.dominion.GameState gameState48 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card46);
    java.lang.String str49 = gameState48.toString();
    java.util.List<org.cs362.dominion.Card> list_card50 = gameState48.cards;
    org.cs362.dominion.Card.CardName cardName51 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card52 = org.cs362.dominion.Card.getCard(list_card50, cardName51);
    org.cs362.dominion.Card.Type type53 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card54 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card50, type53);
    java.util.List<org.cs362.dominion.Card> list_card55 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card40, type53);
    java.util.List<org.cs362.dominion.Card> list_card56 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card38, type53);
    org.cs362.dominion.Card[] card_array57 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card58 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b59 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card58, card_array57);
    org.cs362.dominion.GameState gameState60 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card58);
    org.cs362.dominion.Card.Type type61 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card62 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card58, type61);
    org.cs362.dominion.Card[] card_array63 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card64 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b65 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card64, card_array63);
    org.cs362.dominion.GameState gameState66 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card64);
    java.lang.String str67 = gameState66.toString();
    java.util.List<org.cs362.dominion.Card> list_card68 = gameState66.cards;
    org.cs362.dominion.Card.CardName cardName69 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card70 = org.cs362.dominion.Card.getCard(list_card68, cardName69);
    org.cs362.dominion.Card.Type type71 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card72 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card68, type71);
    java.util.List<org.cs362.dominion.Card> list_card73 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card58, type71);
    org.cs362.dominion.Card.CardName cardName74 = org.cs362.dominion.Card.CardName.Duchy;
    org.cs362.dominion.Card card75 = org.cs362.dominion.Card.getCard(list_card73, cardName74);
    org.cs362.dominion.Card card76 = org.cs362.dominion.Card.getCard(list_card56, cardName74);
    org.cs362.dominion.Card card77 = org.cs362.dominion.Card.getCard(list_card19, cardName74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    org.junit.Assert.assertTrue("'" + cardName6 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName6.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card7);
    org.junit.Assert.assertTrue("'" + cardName9 + "' != '" + org.cs362.dominion.Card.CardName.Smithy + "'", cardName9.equals(org.cs362.dominion.Card.CardName.Smithy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + type15 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type15.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    org.junit.Assert.assertTrue("'" + type17 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type17.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card19);
    org.junit.Assert.assertTrue("'" + type20 + "' != '" + org.cs362.dominion.Card.Type.ACTION + "'", type20.equals(org.cs362.dominion.Card.Type.ACTION));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + type26 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type26.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str32.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    org.junit.Assert.assertTrue("'" + cardName34 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName34.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card35);
    org.junit.Assert.assertTrue("'" + type36 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type36.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    org.junit.Assert.assertTrue("'" + type43 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type43.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str49.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    org.junit.Assert.assertTrue("'" + cardName51 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName51.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card52);
    org.junit.Assert.assertTrue("'" + type53 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type53.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    org.junit.Assert.assertTrue("'" + type61 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type61.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str67.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card68);
    org.junit.Assert.assertTrue("'" + cardName69 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName69.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card70);
    org.junit.Assert.assertTrue("'" + type71 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type71.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card73);
    org.junit.Assert.assertTrue("'" + cardName74 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName74.equals(org.cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card77);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.lang.String str16 = gameState3.toString();
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array32 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card33 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card33, card_array32);
    gameState20.cards = arraylist_card33;
    gameState20.initializeGame();
    org.cs362.dominion.Card[] card_array37 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card38 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card38, card_array37);
    org.cs362.dominion.GameState gameState40 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card38);
    org.cs362.dominion.GameState gameState41 = null;
    org.cs362.dominion.Player player43 = new org.cs362.dominion.Player(gameState41, "hi!");
    java.lang.String str44 = player43.toString();
    org.cs362.dominion.Player[] player_array45 = new org.cs362.dominion.Player[] { player43 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player46 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b47 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player46, player_array45);
    gameState40.players = arraylist_player46;
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState40, "hi!");
    player50.playTtreasureCard();
    gameState20.addPlayer(player50);
    gameState3.addPlayer(player50);
    java.util.List<org.cs362.dominion.Card> list_card54 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState55 = new org.cs362.dominion.GameState(list_card54);
    org.cs362.dominion.Card.CardName cardName56 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card57 = org.cs362.dominion.Card.getCard(list_card54, cardName56);
    java.lang.Object obj58 = null;
    boolean b59 = card57.equals(obj58);
    java.util.List<org.cs362.dominion.Card> list_card60 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState61 = new org.cs362.dominion.GameState(list_card60);
    org.cs362.dominion.Card.CardName cardName62 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card63 = org.cs362.dominion.Card.getCard(list_card60, cardName62);
    int i64 = card57.compareTo(card63);
    player50.discard(card57);
    int i66 = card57.getTreasureValue();
    int i67 = card57.getCost();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str16.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str44.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card54);
    org.junit.Assert.assertTrue("'" + cardName56 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName56.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card60);
    org.junit.Assert.assertTrue("'" + cardName62 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName62.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 6);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.GameState gameState15 = null;
    org.cs362.dominion.Player player17 = new org.cs362.dominion.Player(gameState15, "hi!");
    gameState3.addPlayer(player17);
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i19 = gameState3.play();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i20 = gameState3.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i20);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i15 = gameState3.gameBoard;
    java.util.List<org.cs362.dominion.Player> list_player16 = gameState3.players;
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.GameState gameState21 = null;
    org.cs362.dominion.Player player23 = new org.cs362.dominion.Player(gameState21, "hi!");
    java.lang.String str24 = player23.toString();
    org.cs362.dominion.Player[] player_array25 = new org.cs362.dominion.Player[] { player23 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player26 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b27 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player26, player_array25);
    gameState20.players = arraylist_player26;
    org.cs362.dominion.Player player30 = new org.cs362.dominion.Player(gameState20, "hi!");
    player30.playTtreasureCard();
    player30.playKingdomCard();
    org.cs362.dominion.Card card33 = null;
    player30.discard(card33);
    java.lang.String str35 = player30.toString();
    org.cs362.dominion.Card[] card_array36 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card37 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card37, card_array36);
    org.cs362.dominion.GameState gameState39 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card37);
    org.cs362.dominion.GameState gameState40 = null;
    org.cs362.dominion.Player player42 = new org.cs362.dominion.Player(gameState40, "hi!");
    java.lang.String str43 = player42.toString();
    org.cs362.dominion.Player[] player_array44 = new org.cs362.dominion.Player[] { player42 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player45 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b46 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player45, player_array44);
    gameState39.players = arraylist_player45;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i48 = gameState39.play();
    org.cs362.dominion.Player player50 = new org.cs362.dominion.Player(gameState39, "hi!");
    player50.playKingdomCard();
    java.util.List<org.cs362.dominion.Card> list_card52 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState(list_card52);
    org.cs362.dominion.Card.CardName cardName54 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card55 = org.cs362.dominion.Card.getCard(list_card52, cardName54);
    java.lang.Object obj56 = null;
    boolean b57 = card55.equals(obj56);
    java.util.List<org.cs362.dominion.Card> list_card58 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState59 = new org.cs362.dominion.GameState(list_card58);
    org.cs362.dominion.Card.CardName cardName60 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card61 = org.cs362.dominion.Card.getCard(list_card58, cardName60);
    int i62 = card55.compareTo(card61);
    player50.discard(card55);
    org.cs362.dominion.Card.CardName cardName64 = card55.getCardName();
    player30.discard(card55);
    gameState3.addPlayer(player30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str24.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: [null]Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str43.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card52);
    org.junit.Assert.assertTrue("'" + cardName54 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName54.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card58);
    org.junit.Assert.assertTrue("'" + cardName60 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName60.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    org.junit.Assert.assertTrue("'" + cardName64 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName64.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    java.util.List<org.cs362.dominion.Card> list_card0 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState1 = new org.cs362.dominion.GameState(list_card0);
    org.cs362.dominion.Card.CardName cardName2 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card3 = org.cs362.dominion.Card.getCard(list_card0, cardName2);
    java.lang.Object obj4 = null;
    boolean b5 = card3.equals(obj4);
    java.util.List<org.cs362.dominion.Card> list_card6 = org.cs362.dominion.Card.createCards();
    org.cs362.dominion.GameState gameState7 = new org.cs362.dominion.GameState(list_card6);
    org.cs362.dominion.Card.CardName cardName8 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card9 = org.cs362.dominion.Card.getCard(list_card6, cardName8);
    int i10 = card3.compareTo(card9);
    org.cs362.dominion.Card.CardName cardName11 = card9.getCardName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card0);
    org.junit.Assert.assertTrue("'" + cardName2 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName2.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card6);
    org.junit.Assert.assertTrue("'" + cardName8 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName8.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    org.junit.Assert.assertTrue("'" + cardName11 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName11.equals(org.cs362.dominion.Card.CardName.Gold));

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card16);
    java.lang.String str20 = gameState19.toString();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    java.lang.String str25 = gameState24.toString();
    java.util.List<org.cs362.dominion.Card> list_card26 = gameState24.cards;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i27 = gameState24.getWinners();
    org.cs362.dominion.Card[] card_array28 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card29 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card29, card_array28);
    org.cs362.dominion.GameState gameState31 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card29);
    org.cs362.dominion.GameState gameState32 = null;
    org.cs362.dominion.Player player34 = new org.cs362.dominion.Player(gameState32, "hi!");
    java.lang.String str35 = player34.toString();
    org.cs362.dominion.Player[] player_array36 = new org.cs362.dominion.Player[] { player34 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player37 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b38 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player37, player_array36);
    gameState31.players = arraylist_player37;
    org.cs362.dominion.Player player41 = new org.cs362.dominion.Player(gameState31, "hi!");
    gameState31.initializeGame();
    org.cs362.dominion.GameState gameState43 = null;
    org.cs362.dominion.Player player45 = new org.cs362.dominion.Player(gameState43, "hi!");
    gameState31.addPlayer(player45);
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i47 = gameState31.gameBoard;
    gameState24.gameBoard = hashmap_card_i47;
    gameState19.gameBoard = hashmap_card_i47;
    org.cs362.dominion.Card[] card_array50 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card51 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card51, card_array50);
    org.cs362.dominion.GameState gameState53 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card51);
    org.cs362.dominion.GameState gameState54 = null;
    org.cs362.dominion.Player player56 = new org.cs362.dominion.Player(gameState54, "hi!");
    java.lang.String str57 = player56.toString();
    org.cs362.dominion.Player[] player_array58 = new org.cs362.dominion.Player[] { player56 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player59 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b60 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player59, player_array58);
    gameState53.players = arraylist_player59;
    org.cs362.dominion.Player player63 = new org.cs362.dominion.Player(gameState53, "hi!");
    gameState53.initializeGame();
    org.cs362.dominion.GameState gameState65 = null;
    org.cs362.dominion.Player player67 = new org.cs362.dominion.Player(gameState65, "hi!");
    gameState53.addPlayer(player67);
    java.util.List<org.cs362.dominion.Card> list_card69 = gameState53.cards;
    java.util.List<org.cs362.dominion.Card> list_card70 = gameState53.cards;
    java.lang.String str71 = gameState53.toString();
    org.cs362.dominion.Card[] card_array72 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card73 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b74 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card73, card_array72);
    org.cs362.dominion.GameState gameState75 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card73);
    org.cs362.dominion.Card.Type type76 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card77 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card73, type76);
    gameState53.cards = list_card77;
    org.cs362.dominion.GameState gameState79 = new org.cs362.dominion.GameState(list_card77);
    gameState19.cards = list_card77;
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str20.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str25.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str35.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str57.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str71.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    org.junit.Assert.assertTrue("'" + type76 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type76.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card77);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.GameState gameState4 = null;
    org.cs362.dominion.Player player6 = new org.cs362.dominion.Player(gameState4, "hi!");
    java.lang.String str7 = player6.toString();
    org.cs362.dominion.Player[] player_array8 = new org.cs362.dominion.Player[] { player6 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player9 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b10 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player9, player_array8);
    gameState3.players = arraylist_player9;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState3, "hi!");
    gameState3.initializeGame();
    org.cs362.dominion.Card[] card_array15 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card16 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card16, card_array15);
    gameState3.cards = arraylist_card16;
    org.cs362.dominion.GameState gameState19 = gameState3.clone();
    org.cs362.dominion.GameState gameState20 = gameState19.clone();
    org.cs362.dominion.Card[] card_array21 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card22 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card22, card_array21);
    org.cs362.dominion.GameState gameState24 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card22);
    org.cs362.dominion.GameState gameState25 = null;
    org.cs362.dominion.Player player27 = new org.cs362.dominion.Player(gameState25, "hi!");
    java.lang.String str28 = player27.toString();
    org.cs362.dominion.Player[] player_array29 = new org.cs362.dominion.Player[] { player27 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player30 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player30, player_array29);
    gameState24.players = arraylist_player30;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i33 = gameState24.play();
    org.cs362.dominion.Player player35 = new org.cs362.dominion.Player(gameState24, "hi!");
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i36 = gameState24.getWinners();
    java.util.List<org.cs362.dominion.Player> list_player37 = gameState24.players;
    gameState19.players = list_player37;
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i39 = gameState19.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str7.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str28.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_player37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i39);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    gameState3.initializeGame();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i6 = gameState3.getWinners();
    org.cs362.dominion.Card[] card_array7 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card8 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b9 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card8, card_array7);
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card8);
    org.cs362.dominion.GameState gameState11 = null;
    org.cs362.dominion.Player player13 = new org.cs362.dominion.Player(gameState11, "hi!");
    java.lang.String str14 = player13.toString();
    org.cs362.dominion.Player[] player_array15 = new org.cs362.dominion.Player[] { player13 };
    java.util.ArrayList<org.cs362.dominion.Player> arraylist_player16 = new java.util.ArrayList<org.cs362.dominion.Player>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Player>)arraylist_player16, player_array15);
    gameState10.players = arraylist_player16;
    org.cs362.dominion.Player player20 = new org.cs362.dominion.Player(gameState10, "hi!");
    gameState10.initializeGame();
    java.util.HashMap<org.cs362.dominion.Card,java.lang.Integer> hashmap_card_i22 = gameState10.gameBoard;
    gameState3.gameBoard = hashmap_card_i22;
    org.cs362.dominion.GameState gameState24 = gameState3.clone();
    java.util.HashMap<org.cs362.dominion.Player,java.lang.Integer> hashmap_player_i25 = gameState24.getWinners();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + " --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"+ "'", str14.equals(" --- hi! ---  --- --------------------------- --- Hand: []Discard: []Deck: []Played Cards: []numActions: 0coinss: 0numBuys: 0\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(player_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_card_i22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(hashmap_player_i25);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    org.cs362.dominion.Card.Type type4 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card5 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type4);
    org.cs362.dominion.Card[] card_array6 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card7 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card7, card_array6);
    org.cs362.dominion.GameState gameState9 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card7);
    java.lang.String str10 = gameState9.toString();
    java.util.List<org.cs362.dominion.Card> list_card11 = gameState9.cards;
    org.cs362.dominion.Card.CardName cardName12 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card13 = org.cs362.dominion.Card.getCard(list_card11, cardName12);
    org.cs362.dominion.Card.Type type14 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card15 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card11, type14);
    java.util.List<org.cs362.dominion.Card> list_card16 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card1, type14);
    org.cs362.dominion.Card[] card_array17 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card18 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card18, card_array17);
    org.cs362.dominion.GameState gameState20 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card18);
    org.cs362.dominion.Card.Type type21 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card22 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type21);
    org.cs362.dominion.Card[] card_array23 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card24 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b25 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card24, card_array23);
    org.cs362.dominion.GameState gameState26 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card24);
    java.lang.String str27 = gameState26.toString();
    java.util.List<org.cs362.dominion.Card> list_card28 = gameState26.cards;
    org.cs362.dominion.Card.CardName cardName29 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card30 = org.cs362.dominion.Card.getCard(list_card28, cardName29);
    org.cs362.dominion.Card.Type type31 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card32 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card28, type31);
    java.util.List<org.cs362.dominion.Card> list_card33 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card18, type31);
    java.util.List<org.cs362.dominion.Card> list_card34 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card16, type31);
    org.cs362.dominion.Card[] card_array35 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card36 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card36, card_array35);
    org.cs362.dominion.GameState gameState38 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card36);
    org.cs362.dominion.Card.Type type39 = org.cs362.dominion.Card.Type.VICTORY;
    java.util.List<org.cs362.dominion.Card> list_card40 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card36, type39);
    org.cs362.dominion.Card[] card_array41 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card42 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card42, card_array41);
    org.cs362.dominion.GameState gameState44 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card42);
    java.lang.String str45 = gameState44.toString();
    java.util.List<org.cs362.dominion.Card> list_card46 = gameState44.cards;
    org.cs362.dominion.Card.CardName cardName47 = org.cs362.dominion.Card.CardName.Gold;
    org.cs362.dominion.Card card48 = org.cs362.dominion.Card.getCard(list_card46, cardName47);
    org.cs362.dominion.Card.Type type49 = org.cs362.dominion.Card.Type.TREASURE;
    java.util.List<org.cs362.dominion.Card> list_card50 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)list_card46, type49);
    java.util.List<org.cs362.dominion.Card> list_card51 = org.cs362.dominion.Card.filter((java.lang.Iterable<org.cs362.dominion.Card>)arraylist_card36, type49);
    org.cs362.dominion.Card.CardName cardName52 = org.cs362.dominion.Card.CardName.Duchy;
    org.cs362.dominion.Card card53 = org.cs362.dominion.Card.getCard(list_card51, cardName52);
    org.cs362.dominion.Card card54 = org.cs362.dominion.Card.getCard(list_card34, cardName52);
    org.cs362.dominion.Card.CardName cardName55 = org.cs362.dominion.Card.CardName.Cooper;
    org.cs362.dominion.Card card56 = org.cs362.dominion.Card.getCard(list_card34, cardName55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    org.junit.Assert.assertTrue("'" + type4 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type4.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str10.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card11);
    org.junit.Assert.assertTrue("'" + cardName12 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName12.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card13);
    org.junit.Assert.assertTrue("'" + type14 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type14.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    org.junit.Assert.assertTrue("'" + type21 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type21.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str27.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card28);
    org.junit.Assert.assertTrue("'" + cardName29 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName29.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card30);
    org.junit.Assert.assertTrue("'" + type31 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type31.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + type39 + "' != '" + org.cs362.dominion.Card.Type.VICTORY + "'", type39.equals(org.cs362.dominion.Card.Type.VICTORY));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str45.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card46);
    org.junit.Assert.assertTrue("'" + cardName47 + "' != '" + org.cs362.dominion.Card.CardName.Gold + "'", cardName47.equals(org.cs362.dominion.Card.CardName.Gold));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card48);
    org.junit.Assert.assertTrue("'" + type49 + "' != '" + org.cs362.dominion.Card.Type.TREASURE + "'", type49.equals(org.cs362.dominion.Card.Type.TREASURE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card51);
    org.junit.Assert.assertTrue("'" + cardName52 + "' != '" + org.cs362.dominion.Card.CardName.Duchy + "'", cardName52.equals(org.cs362.dominion.Card.CardName.Duchy));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card54);
    org.junit.Assert.assertTrue("'" + cardName55 + "' != '" + org.cs362.dominion.Card.CardName.Cooper + "'", cardName55.equals(org.cs362.dominion.Card.CardName.Cooper));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(card56);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    org.cs362.dominion.Card[] card_array0 = new org.cs362.dominion.Card[] {  };
    java.util.ArrayList<org.cs362.dominion.Card> arraylist_card1 = new java.util.ArrayList<org.cs362.dominion.Card>();
    boolean b2 = java.util.Collections.addAll((java.util.Collection<org.cs362.dominion.Card>)arraylist_card1, card_array0);
    org.cs362.dominion.GameState gameState3 = new org.cs362.dominion.GameState((java.util.List<org.cs362.dominion.Card>)arraylist_card1);
    java.lang.String str4 = gameState3.toString();
    java.util.List<org.cs362.dominion.Card> list_card5 = gameState3.cards;
    org.cs362.dominion.Player player7 = new org.cs362.dominion.Player(gameState3, "");
    org.cs362.dominion.GameState gameState8 = gameState3.clone();
    java.util.List<org.cs362.dominion.Card> list_card9 = gameState3.cards;
    org.cs362.dominion.GameState gameState10 = new org.cs362.dominion.GameState(list_card9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(card_array0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "The board game is embty you need to intialize the game!!!!"+ "'", str4.equals("The board game is embty you need to intialize the game!!!!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(gameState8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(list_card9);

  }

}
