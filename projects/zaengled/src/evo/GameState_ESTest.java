/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 18:09:55 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Randomness.reset(0L);
      Card.CardName.values();
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      GameState gameState1 = gameState0.clone();
      GameState gameState2 = gameState0.clone();
      gameState2.getWinners();
      gameState1.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState2.play();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card.getCard(gameState1.cards, card_CardName0);
      hashMap0.putAll(gameState1.gameBoard);
      Integer integer0 = new Integer(896);
      gameState0.toString();
      Integer.compareUnsigned(46, 46);
      hashMap0.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      ArrayList<Player> arrayList1 = new ArrayList<Player>();
      gameState0.players = (List<Player>) arrayList1;
      Player player0 = new Player(gameState0, (String) null);
      arrayList1.add(player0);
      player0.playTtreasureCard();
      arrayList1.add(player0);
      gameState0.cards = (List<Card>) arrayList0;
      GameState gameState1 = new GameState((List<Card>) arrayList0);
      GameState gameState2 = gameState0.clone();
      gameState2.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState2.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.getWinners();
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      GameState gameState1 = gameState0.clone();
      gameState1.getWinners();
      gameState1.initializeGame();
      gameState1.toString();
      Random.setNextRandom(1763);
      gameState0.toString();
      gameState0.players = gameState1.players;
      GameState gameState2 = gameState0.clone();
      gameState2.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState2.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      gameState1.getWinners();
      GameState gameState2 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState2, "L7Pq");
      List<Card> list0 = player0.hand;
      Card.CardName card_CardName0 = Card.CardName.Sea_Hag;
      Card.getCard(list0, card_CardName0);
      arrayList0.add((Card) null);
      gameState1.players = null;
      Player player1 = new Player(gameState1, "2uY *");
      Player player2 = player1.clone();
      // Undeclared exception!
      try { 
        gameState1.addPlayer(player2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Card.Type.values();
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Randomness.random = null;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      GameState gameState2 = new GameState(list0);
      Player player0 = new Player(gameState2, "ZUJ^v6@#1!MXpZC%{L");
      Player player1 = player0.clone();
      gameState1.addPlayer(player1);
      gameState1.gameBoard = gameState0.gameBoard;
      gameState1.play();
      gameState1.play();
      Randomness.reset(0L);
      List<Player> list1 = gameState1.players;
      GameState gameState3 = new GameState(gameState1.cards);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Randomness.reset(0L);
      Card.CardName.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      GameState gameState2 = gameState0.clone();
      gameState2.getWinners();
      gameState1.isGameOver();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState2.play();
      Card.CardName card_CardName0 = Card.CardName.Silver;
      Card card0 = Card.getCard(gameState1.cards, card_CardName0);
      Integer integer0 = new Integer(909);
      Integer.compareUnsigned(46, 46);
      hashMap0.put(card0, integer0);
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.getWinners();
      Player player0 = new Player(gameState0, (String) null);
      player0.toString();
      gameState0.addPlayer(player0);
      GameState gameState1 = gameState0.clone();
      gameState1.getWinners();
      gameState1.initializeGame();
      gameState1.toString();
      Random.setNextRandom(1788);
      gameState1.toString();
      gameState0.players = gameState1.players;
      GameState gameState2 = gameState0.clone();
      gameState2.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState2.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      gameState0.clone();
      Vector<Player> vector1 = new Vector<Player>();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(gameState0.cards, card_CardName0);
      Random.setNextRandom(40);
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("Cards on the table: \n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.CardName.Cards on the table: 
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Card.CardName.values();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Card.CardName card_CardName0 = Card.CardName.Adventurer;
      Player player0 = new Player(gameState0, "F");
      Player player1 = player0.clone();
      player1.drawCard();
      stack0.add((Card) null);
      // Undeclared exception!
      try { 
        Card.getCard(stack0, card_CardName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      ArrayList<Player> arrayList1 = new ArrayList<Player>();
      gameState0.players = (List<Player>) arrayList1;
      Player player0 = new Player(gameState0, (String) null);
      player0.playTtreasureCard();
      arrayList1.add(player0);
      gameState0.cards = (List<Card>) arrayList0;
      GameState gameState1 = new GameState((List<Card>) arrayList0);
      GameState gameState2 = gameState0.clone();
      gameState2.initializeGame();
      String string0 = gameState0.toString();
      assertEquals("The board game is embty you need to intialize the game!!!!", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState0.clone();
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>(10);
      GameState gameState0 = new GameState((List<Card>) vector0);
      GameState gameState1 = gameState0.clone();
      gameState1.isGameOver();
      Card.CardName card_CardName0 = Card.CardName.Duchy;
      gameState0.cards = gameState1.cards;
      Card.getCard(gameState0.cards, card_CardName0);
      vector0.add((Card) null);
      vector0.ensureCapacity(33);
      gameState0.play();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      List<Card> list0 = gameState0.cards;
      gameState1.players = gameState0.players;
      gameState1.play();
      gameState1.initializeGame();
      gameState1.addPlayer((Player) null);
      Card.CardName[] card_CardNameArray0 = Card.CardName.values();
      assertNotNull(card_CardNameArray0);
  }
}
