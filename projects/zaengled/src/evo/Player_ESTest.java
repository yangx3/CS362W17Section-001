/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 27 18:07:38 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.testcase.execution.CodeUnderTestException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Randomness.reset(0L);
      GameState gameState0 = new GameState((List<Card>) null);
      Stack<Card> stack0 = new Stack<Card>();
      gameState0.cards = (List<Card>) stack0;
      Player player0 = new Player(gameState0, (String) null);
      stack0.trimToSize();
      player0.drawCard();
      Card.Type card_Type0 = Card.Type.VICTORY;
      Card.filter(gameState0.cards, card_Type0);
      stack0.add((Card) null);
      Player player1 = new Player(gameState0, "");
      gameState0.players = null;
      player1.coins = (-171);
      player1.scoreFor();
      gameState0.cards = null;
      player1.numBuys = 1995;
      player1.numBuys = 1995;
      player1.scoreFor();
      player1.playKingdomCard();
      Card.CardName.values();
      Randomness.nextRandomInt(1995);
      player1.buyCard();
      player1.numBuys = 1995;
      LinkedList<Card> linkedList0 = player1.deck;
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.CardName.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "J<$<]xnaC2[5*gp0:N");
      Player player1 = player0.clone();
      player1.discard = list0;
      player1.endTurn();
      player1.endTurn();
      player1.playKingdomCard();
      player0.drawCard();
      player1.discard((Card) null);
      player1.coins = 7;
      List<Card> list1 = player1.discard;
      // Undeclared exception!
      try { 
        player1.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Card.Type.values();
      Player player0 = new Player((GameState) null, "Reveal cards from the player deck until player reveal 2 Treasure cards. Put those Treasure cards into player hand and discard the other revealed cards.");
      player0.playedCards = null;
      // Undeclared exception!
      try { 
        player0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = new GameState(gameState0.cards);
      Player player0 = new Player(gameState1, "J<$<]xnaC2[5*gp0:N");
      Player player1 = player0.clone();
      player1.playedCards = gameState1.cards;
      player1.numActions = (-1922);
      player1.discard = list0;
      // Undeclared exception!
      try { 
        player1.endTurn();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      Player player0 = new Player(gameState0, "");
      player0.toString();
      player0.discard = null;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      gameState1.initializeGame();
      Player player0 = new Player(gameState1, " --- --------------------------- --- ");
      player0.discard = gameState0.cards;
      gameState1.getWinners();
      player0.coins = 8;
      Card card0 = player0.drawCard();
      Player player1 = player0.clone();
      player1.printStateGame();
      Card.Type.values();
      player0.discard(card0);
      String string0 = player0.player_username;
      player1.numBuys = (-290);
      List<Card> list1 = player0.hand;
      player1.toString();
      int int0 = player0.numBuys;
      Card.CardName.values();
      player0.playedCards = list1;
      LinkedList<Card> linkedList0 = player0.deck;
      player1.toString();
      player0.endTurn();
      player1.playedCards = null;
      player0.endTurn();
      player0.playTtreasureCard();
      player0.scoreFor();
      LinkedList<Card> linkedList1 = player1.deck;
      // Undeclared exception!
      try { 
        player1.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Randomness.nextRandomInt((-1571));
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      arrayList0.clear();
      Stack<Card> stack0 = new Stack<Card>();
      gameState1.cards = (List<Card>) stack0;
      Player player0 = new Player(gameState1, (String) null);
      player0.playTtreasureCard();
      player0.playTtreasureCard();
      player0.drawCard();
      player0.numBuys = (-1571);
      player0.numActions = (-765);
      Randomness.reset((-113L));
      player0.buyCard();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, ">(");
      gameState0.toString();
      player0.numBuys = (-1235);
      player0.player_username = "<;c<7L=&xO|`zW";
      Card.Type.values();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      linkedList0.offer(card0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "J<$<]xnaC2[5*gp0:N");
      Player player1 = player0.clone();
      player1.numActions = (-1922);
      player1.endTurn();
      player1.numActions = (-1922);
      player1.playKingdomCard();
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Sea_Hag;
      Card.getCard(list0, card_CardName0);
      player0.discard((Card) null);
      List<Card> list1 = player1.discard;
      // Undeclared exception!
      try { 
        player1.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "}UW,");
      player0.discard = gameState0.cards;
      Player player1 = player0.clone();
      int int0 = player1.coins;
      gameState0.clone();
      player1.endTurn();
      int int1 = player1.numActions;
      player1.drawCard();
      List<Card> list1 = player1.playedCards;
      List<Card> list2 = player1.discard;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "p+px>`9fGD");
      player0.playTtreasureCard();
      player0.coins = 1;
      player0.playKingdomCard();
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Randomness.reset((-879L));
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      Player player1 = player0.clone();
      Card.Type.values();
      player0.printStateGame();
      player1.numBuys = 30;
      Player player2 = player0.clone();
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player2.deck = linkedList0;
      player1.drawCard();
      linkedList0.add((Card) null);
      gameState0.addPlayer(player2);
      player1.numBuys = 6;
      player0.discard = gameState0.cards;
      player2.endTurn();
      Card card0 = player0.drawCard();
      player1.discard(card0);
      LinkedList<Card> linkedList1 = player0.deck;
      // Undeclared exception!
      try { 
        Card.Type.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.Type.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Randomness.random = null;
      Player player0 = new Player((GameState) null, "");
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Randomness", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.clone();
      Player player0 = new Player(gameState0, "");
      player0.initializePlayerTurn();
      player0.hand = gameState0.cards;
      linkedList0.add((Card) null);
      Stack<Player> stack0 = new Stack<Player>();
      stack0.add(player0);
      gameState0.cards = (List<Card>) linkedList0;
      stack0.clear();
      stack0.add(player0);
      stack0.add(player0);
      Stack<Card> stack1 = new Stack<Card>();
      Card.CardName card_CardName0 = Card.CardName.Great_Hall;
      Card.getCard(stack1, card_CardName0);
      linkedList0.add((Card) null);
      stack0.add(player0);
      player0.coins = 4;
      gameState0.players = (List<Player>) stack0;
      player0.playedCards = (List<Card>) linkedList0;
      player0.initializePlayerTurn();
      player0.numActions = 17;
      // Undeclared exception!
      try { 
        player0.playTtreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Randomness.random = null;
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      Player player0 = new Player(gameState0, "Ws1~`?Z58_");
      player0.drawCard();
      gameState0.toString();
      gameState0.getWinners();
      gameState0.cards = (List<Card>) linkedList0;
      linkedList0.parallelStream();
      player0.endTurn();
      player0.gain((Card) null);
      player0.coins = 82;
      LinkedList<Card> linkedList1 = player0.deck;
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((GameState) null, "!{Z<p$+xcK-5PGHq=4P");
      player0.coins = (-4039);
      player0.initializePlayerTurn();
      List<Card> list0 = player0.discard;
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      player0.deck = linkedList0;
      player0.discard = list0;
      player0.drawCard();
      player0.deck.offerFirst((Card) null);
      player0.numBuys = 5;
      player0.deck.add((Card) null);
      player0.deck = null;
      player0.discard = list0;
      // Undeclared exception!
      try { 
        player0.initializePlayerTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((GameState) null, "l-Y(7I103ncKEJ-z9");
      player0.endTurn();
      player0.toString();
      player0.drawCard();
      player0.drawCard();
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card.getCard(list0, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((GameState) null, (String) null);
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "J<$<]xnaC2[5*gp0:N");
      Player player1 = player0.clone();
      player1.discard = list0;
      player1.endTurn();
      player1.playKingdomCard();
      player0.drawCard();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      player1.playTtreasureCard();
      Card.getCard(list0, card_CardName0);
      player0.discard((Card) null);
      List<Card> list1 = player1.discard;
      player1.endTurn();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      player0.hand = gameState0.cards;
      player0.endTurn();
      Player player1 = new Player(gameState1, (String) null);
      player1.buyCard();
      Card.CardName card_CardName0 = Card.CardName.Province;
      Card card0 = Card.getCard(gameState0.cards, card_CardName0);
      player1.gain(card0);
      int int0 = player0.coins;
      player0.toString();
      player0.scoreFor();
      // Undeclared exception!
      try { 
        Card.CardName.valueOf(" ---  ---  --- --------------------------- --- Hand: [ \n\tGold,  \n\tSilver,  \n\tCopper,  \n\tProvince,  \n\tDuchy]Discard: []Deck: [ \n\tEstate,  \n\tCurse,  \n\tAdventurer,  \n\tSmithy,  \n\tVillage,  \n\tAmbassador,  \n\tBaron,  \n\tCouncil_Room,  \n\tCutpurse,  \n\tEmbargo,  \n\tFeast,  \n\tGardens,  \n\tGreat_Hall,  \n\tMine,  \n\tSea_Hag]Played Cards: []numActions: 1coinss: 0numBuys: 1\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant Card.CardName. ---  ---  --- --------------------------- --- Hand: [ 
         // \tGold,  
         // \tSilver,  
         // \tCopper,  
         // \tProvince,  
         // \tDuchy]Discard: []Deck: [ 
         // \tEstate,  
         // \tCurse,  
         // \tAdventurer,  
         // \tSmithy,  
         // \tVillage,  
         // \tAmbassador,  
         // \tBaron,  
         // \tCouncil_Room,  
         // \tCutpurse,  
         // \tEmbargo,  
         // \tFeast,  
         // \tGardens,  
         // \tGreat_Hall,  
         // \tMine,  
         // \tSea_Hag]Played Cards: []numActions: 1coinss: 0numBuys: 1
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      arrayList0.clear();
      Stack<Card> stack0 = new Stack<Card>();
      Player player0 = new Player(gameState1, (String) null);
      player0.playTtreasureCard();
      player0.drawCard();
      Randomness.reset((-119L));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      String string0 = "J<$<]xnaC2[5*gp0:N";
      Player player0 = new Player(gameState0, "J<$<]xnaC2[5*gp0:N");
      Player player1 = player0.clone();
      player1.discard = list0;
      player1.endTurn();
      player1.endTurn();
      player1.playKingdomCard();
      player0.drawCard();
      player1.discard((Card) null);
      List<Card> list1 = player1.discard;
      // Undeclared exception!
      try { 
        player1.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      String string0 = "5(n0{^g 'l$;K[0a";
      Player player0 = new Player(gameState0, "5(n0{^g 'l$;K[0a");
      Player player1 = player0.clone();
      player1.discard = list0;
      player1.endTurn();
      player1.endTurn();
      player1.playKingdomCard();
      List<Card> list1 = player1.discard;
      // Undeclared exception!
      try { 
        player1.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      GameState gameState1 = gameState0.clone();
      String string0 = "J<$<]xnaC2[5*gp0:N";
      Player player0 = new Player(gameState1, "J<$<]xnaC2[5*gp0:N");
      Player player1 = player0.clone();
      player1.discard = list0;
      player1.endTurn();
      player1.playKingdomCard();
      Card.CardName card_CardName0 = Card.CardName.Mine;
      player1.playTtreasureCard();
      Card.getCard(list0, card_CardName0);
      List<Card> list1 = player1.discard;
      // Undeclared exception!
      try { 
        player1.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "The player gets +2 play Actions.");
      gameState0.toString();
      Card.CardName card_CardName0 = Card.CardName.Feast;
      Card.getCard(gameState0.cards, card_CardName0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      gameState0.isGameOver();
      Player player0 = new Player(gameState0, "");
      GameState gameState1 = gameState0.clone();
      player0.hand = gameState1.cards;
      player0.initializePlayerTurn();
      player0.printStateGame();
      player0.playedCards = (List<Card>) linkedList0;
      int int0 = player0.scoreFor();
      assertEquals(0, int0);
  }
}
